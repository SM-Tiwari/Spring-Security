package id.gnvsolution.d3.api.controller;

import id.gnvsolution.d3.api.dto.request.InAppNotificationDto;
import id.gnvsolution.d3.api.dto.request.InAppReadNotificationDto;
import id.gnvsolution.d3.api.helper.enums.AppDefaultValues;
import id.gnvsolution.d3.api.helper.enums.AppUtils;
import id.gnvsolution.d3.api.security.securityutil.JWTConstant;
import id.gnvsolution.d3.api.security.securityutil.TokenDetails;
import id.gnvsolution.d3.api.security.securityutil.TokenExtractor;
import id.gnvsolution.d3.api.service.InAppNotificationService;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.UnsupportedJwtException;

import java.security.SignatureException;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.gnv.vnm.selfcare.core.model.ServiceResult;
import com.gnv.vnm.selfcare.core.model.ServiceResult.StatusCode;

/**
 * <pre>
 *  id.gnvsolution.d3.api.controller.InAppNotificationController 
 * </pre>
 *
 * @author edwin < edwinkun at gmail dot com >
 * May 24, 2017 4:04:51 PM
 *
 */
@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
@RequestMapping("/api/v1/notification")
public class InAppNotificationController extends BaseController {

	@Autowired
	private InAppNotificationService service;

	public static final Logger LOGGER = LoggerFactory.getLogger(ProfileController.class);
	@Autowired
	private TokenExtractor tokenExtractor;

	@RequestMapping(value = "/get", method = RequestMethod.POST)
	public Object getNotifications(@RequestBody InAppNotificationDto dto,
			@RequestHeader(value=JWTConstant.JWT_HEADER_NAME, required = false) String authToken) {
		LOGGER.info("Inside InAppNotificationController in getNotifications method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			System.out.println("authToken _____________" + authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			String msisdn=AppUtils.removeCountryCode(dto.getMsisdn(), AppDefaultValues.COUNTRY_CODE);
			dto.setMsisdn(msisdn);
			if (tokenDetails != null && dto.getMsisdn().trim().equalsIgnoreCase(tokenDetails.getMsisdn().trim())) {

				return new ServiceResult(StatusCode.SUCCESS, service.getInAppNotifications(dto), "Success");
			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside InAppNotificationController in getNotifications method " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside InAppNotificationController in getNotifications method" + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside InAppNotificationController in getNotifications method " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}
		// return service.getInAppNotifications(dto);
	}

	@RequestMapping(value = "/read-update", method = RequestMethod.POST)
	public Object readNotification(@RequestBody InAppReadNotificationDto dto,
			@RequestHeader(value=JWTConstant.JWT_HEADER_NAME, required = false) String authToken) {
		LOGGER.info("Inside InAppNotificationController in readNotification method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			System.out.println("authToken _____________" + authToken);
			String msisdn=AppUtils.removeCountryCode(dto.getMsisdn(), AppDefaultValues.COUNTRY_CODE);
			dto.setMsisdn(msisdn);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			if (tokenDetails != null && dto.getMsisdn().trim().equalsIgnoreCase(tokenDetails.getMsisdn().trim())) {

				return new ServiceResult(StatusCode.SUCCESS, service.readInAppNotifications(dto), "Success");
			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside InAppNotificationController in readNotification method " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside InAppNotificationController in readNotification method" + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside InAppNotificationController in readNotification method " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}
		// return service.readInAppNotifications(dto);
	}

	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public Object delete(@RequestBody InAppReadNotificationDto dto,
			@RequestHeader(value=JWTConstant.JWT_HEADER_NAME, required = false) String authToken) {
		LOGGER.info("Inside InAppNotificationController in delete method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			System.out.println("authToken _____________" + authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			String msisdn=AppUtils.removeCountryCode(dto.getMsisdn(), AppDefaultValues.COUNTRY_CODE);
			dto.setMsisdn(msisdn);
			if (tokenDetails != null && dto.getMsisdn().trim().equalsIgnoreCase(tokenDetails.getMsisdn().trim())) {

				return new ServiceResult(StatusCode.SUCCESS, service.deleteNotification(dto), "Success");
			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside InAppNotificationController in delete method " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside InAppNotificationController in delete method" + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside InAppNotificationController in delete method " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}
		// return service.deleteNotification(dto);
	}
    
}
