/**
 * TibcoODPSingleQueryProcessStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.7.8  Built on : May 19, 2018 (07:06:11 BST)
 */
package id.gnvsolution.d3.api.wsdl;


/*
 *  TibcoODPSingleQueryProcessStub java implementation
 */
public class TibcoODPSingleQueryProcessStub extends org.apache.axis2.client.Stub {
    private static int counter = 0;
    protected org.apache.axis2.description.AxisOperation[] _operations;

    //hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();
    private javax.xml.namespace.QName[] opNameArray = null;

    /**
     *Constructor that takes in a configContext
     */
    public TibcoODPSingleQueryProcessStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(configurationContext, targetEndpoint, false);
    }

    /**
     * Constructor that takes in a configContext  and useseperate listner
     */
    public TibcoODPSingleQueryProcessStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
        //To populate AxisService
        populateAxisService();
        populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,
                _service);

        _serviceClient.getOptions()
                      .setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
    }

    /**
     * Default Constructor
     */
    public TibcoODPSingleQueryProcessStub(
        org.apache.axis2.context.ConfigurationContext configurationContext)
        throws org.apache.axis2.AxisFault {
        this(configurationContext,
            "http://localhost:45012/Business_Process/ODP_Interfaces/TibcoODPSingleQueryProcess");
    }

    /**
     * Default Constructor
     */
    public TibcoODPSingleQueryProcessStub() throws org.apache.axis2.AxisFault {
        this(
            "http://localhost:45012/Business_Process/ODP_Interfaces/TibcoODPSingleQueryProcess");
    }

    /**
     * Constructor taking the target endpoint
     */
    public TibcoODPSingleQueryProcessStub(java.lang.String targetEndpoint)
        throws org.apache.axis2.AxisFault {
        this(null, targetEndpoint);
    }

    private static synchronized java.lang.String getUniqueSuffix() {
        // reset the counter if it is greater than 99999
        if (counter > 99999) {
            counter = 0;
        }

        counter = counter + 1;

        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) +
        "_" + counter;
    }

    private void populateAxisService() throws org.apache.axis2.AxisFault {
        //creating the Service with a unique name
        _service = new org.apache.axis2.description.AxisService(
                "TibcoODPSingleQueryProcess" + getUniqueSuffix());
        addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[1];

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://xmlns.example.com/1401975688896/TIbcoODPOpImpl/Business__Process/ODP__Interfaces",
                "tIbcoODPOp"));
        _service.addOperation(__operation);

        _operations[0] = __operation;
    }

    //populates the faults
    private void populateFaults() {
    }

    /**
     * Auto generated method signature
     *
     * @see id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcess#tIbcoODPOp
     * @param tibcoODPRequest0
     */
    public id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPResponse tIbcoODPOp(
        id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPRequest tibcoODPRequest0)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
            _operationClient.getOptions()
                            .setAction("/Business_Process/ODP_Interfaces/TibcoODPSingleQueryProcess");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    tibcoODPRequest0,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://xmlns.example.com/1401975688896/TIbcoODPOpImpl/Business__Process/ODP__Interfaces",
                            "tIbcoODPOp")),
                    new javax.xml.namespace.QName(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd",
                        "TibcoODPRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPResponse.class);

            return (id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "TIbcoODPOp"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "TIbcoODPOp"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "TIbcoODPOp"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcess#starttIbcoODPOp
     * @param tibcoODPRequest0
     */
    public void starttIbcoODPOp(
        id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPRequest tibcoODPRequest0,
        final id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
        _operationClient.getOptions()
                        .setAction("/Business_Process/ODP_Interfaces/TibcoODPSingleQueryProcess");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                tibcoODPRequest0,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://xmlns.example.com/1401975688896/TIbcoODPOpImpl/Business__Process/ODP__Interfaces",
                        "tIbcoODPOp")),
                new javax.xml.namespace.QName(
                    "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd",
                    "TibcoODPRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPResponse.class);
                        callback.receiveResulttIbcoODPOp((id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrortIbcoODPOp(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "TIbcoODPOp"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "TIbcoODPOp"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "TIbcoODPOp"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrortIbcoODPOp(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrortIbcoODPOp(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrortIbcoODPOp(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrortIbcoODPOp(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrortIbcoODPOp(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrortIbcoODPOp(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrortIbcoODPOp(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrortIbcoODPOp(f);
                                }
                            } else {
                                callback.receiveErrortIbcoODPOp(f);
                            }
                        } else {
                            callback.receiveErrortIbcoODPOp(f);
                        }
                    } else {
                        callback.receiveErrortIbcoODPOp(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrortIbcoODPOp(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[0].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[0].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        if (opNameArray == null) {
            return false;
        }

        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }

        return false;
    }

    private org.apache.axiom.om.OMElement toOM(
        id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */

    /**
     *  get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory) {
        return factory.getDefaultEnvelope();
    }

    private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
        java.lang.Class type) throws org.apache.axis2.AxisFault {
        try {
            if (id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPRequest.class.equals(
                        type)) {
                return id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPResponse.class.equals(
                        type)) {
                return id.gnvsolution.d3.api.wsdl.TibcoODPSingleQueryProcessStub.TibcoODPResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

        return null;
    }

    //http://localhost:45012/Business_Process/ODP_Interfaces/TibcoODPSingleQueryProcess
    public static class ExtensionMapper {
        public static java.lang.Object getTypeObject(
            java.lang.String namespaceURI, java.lang.String typeName,
            javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) &&
                    "CreditLimitInfo_type0".equals(typeName)) {
                return CreditLimitInfo_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) && "TKCINFO_type0".equals(typeName)) {
                return TKCINFO_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) &&
                    "DuePaymentInfo_type0".equals(typeName)) {
                return DuePaymentInfo_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) && "BONUS_INFO_type1".equals(typeName)) {
                return BONUS_INFO_type1.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) &&
                    "Bonus_Details_type0".equals(typeName)) {
                return Bonus_Details_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) && "BONUS_INFO_type0".equals(typeName)) {
                return BONUS_INFO_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) &&
                    "SubsriberInfo_type0".equals(typeName)) {
                return SubsriberInfo_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) && "AttribDtl_type1".equals(typeName)) {
                return AttribDtl_type1.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) &&
                    "HybridBalanceInfo_type0".equals(typeName)) {
                return HybridBalanceInfo_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) && "Attribute_type1".equals(typeName)) {
                return Attribute_type1.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) && "AttribDtl_type0".equals(typeName)) {
                return AttribDtl_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) && "BONUS_ITEM_type0".equals(typeName)) {
                return BONUS_ITEM_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) && "Attribute_type0".equals(typeName)) {
                return Attribute_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) &&
                    "DuePaymentInfoDetails_type0".equals(typeName)) {
                return DuePaymentInfoDetails_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd".equals(
                        namespaceURI) && "SQBonusInfo_type0".equals(typeName)) {
                return SQBonusInfo_type0.Factory.parse(reader);
            }

            throw new org.apache.axis2.databinding.ADBException(
                "Unsupported type " + namespaceURI + " " + typeName);
        }
    }

    public static class CreditLimitInfo_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = CreditLimitInfo_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for Total_credit_limit
         */
        protected java.lang.String localTotal_credit_limit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotal_credit_limitTracker = false;

        /**
         * field for Remaining_credit_limit
         */
        protected java.lang.String localRemaining_credit_limit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRemaining_credit_limitTracker = false;

        /**
         * field for Bill_cycle_day
         */
        protected java.lang.String localBill_cycle_day;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBill_cycle_dayTracker = false;

        /**
         * field for Last_billing_date
         */
        protected java.lang.String localLast_billing_date;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLast_billing_dateTracker = false;

        /**
         * field for Payment_due_date
         */
        protected java.lang.String localPayment_due_date;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPayment_due_dateTracker = false;

        /**
         * field for Subscriber_status
         */
        protected java.lang.String localSubscriber_status;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSubscriber_statusTracker = false;

        /**
         * field for StatusCode
         */
        protected java.lang.String localStatusCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStatusCodeTracker = false;

        /**
         * field for StatusText
         */
        protected java.lang.String localStatusText;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStatusTextTracker = false;

        public boolean isTotal_credit_limitSpecified() {
            return localTotal_credit_limitTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTotal_credit_limit() {
            return localTotal_credit_limit;
        }

        /**
         * Auto generated setter method
         * @param param Total_credit_limit
         */
        public void setTotal_credit_limit(java.lang.String param) {
            localTotal_credit_limitTracker = param != null;

            this.localTotal_credit_limit = param;
        }

        public boolean isRemaining_credit_limitSpecified() {
            return localRemaining_credit_limitTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRemaining_credit_limit() {
            return localRemaining_credit_limit;
        }

        /**
         * Auto generated setter method
         * @param param Remaining_credit_limit
         */
        public void setRemaining_credit_limit(java.lang.String param) {
            localRemaining_credit_limitTracker = param != null;

            this.localRemaining_credit_limit = param;
        }

        public boolean isBill_cycle_daySpecified() {
            return localBill_cycle_dayTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBill_cycle_day() {
            return localBill_cycle_day;
        }

        /**
         * Auto generated setter method
         * @param param Bill_cycle_day
         */
        public void setBill_cycle_day(java.lang.String param) {
            localBill_cycle_dayTracker = param != null;

            this.localBill_cycle_day = param;
        }

        public boolean isLast_billing_dateSpecified() {
            return localLast_billing_dateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLast_billing_date() {
            return localLast_billing_date;
        }

        /**
         * Auto generated setter method
         * @param param Last_billing_date
         */
        public void setLast_billing_date(java.lang.String param) {
            localLast_billing_dateTracker = param != null;

            this.localLast_billing_date = param;
        }

        public boolean isPayment_due_dateSpecified() {
            return localPayment_due_dateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPayment_due_date() {
            return localPayment_due_date;
        }

        /**
         * Auto generated setter method
         * @param param Payment_due_date
         */
        public void setPayment_due_date(java.lang.String param) {
            localPayment_due_dateTracker = param != null;

            this.localPayment_due_date = param;
        }

        public boolean isSubscriber_statusSpecified() {
            return localSubscriber_statusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSubscriber_status() {
            return localSubscriber_status;
        }

        /**
         * Auto generated setter method
         * @param param Subscriber_status
         */
        public void setSubscriber_status(java.lang.String param) {
            localSubscriber_statusTracker = param != null;

            this.localSubscriber_status = param;
        }

        public boolean isStatusCodeSpecified() {
            return localStatusCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusCode() {
            return localStatusCode;
        }

        /**
         * Auto generated setter method
         * @param param StatusCode
         */
        public void setStatusCode(java.lang.String param) {
            localStatusCodeTracker = param != null;

            this.localStatusCode = param;
        }

        public boolean isStatusTextSpecified() {
            return localStatusTextTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusText() {
            return localStatusText;
        }

        /**
         * Auto generated setter method
         * @param param StatusText
         */
        public void setStatusText(java.lang.String param) {
            localStatusTextTracker = param != null;

            this.localStatusText = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":CreditLimitInfo_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "CreditLimitInfo_type0", xmlWriter);
                }
            }

            if (localTotal_credit_limitTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Total_credit_limit",
                    xmlWriter);

                if (localTotal_credit_limit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Total_credit_limit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTotal_credit_limit);
                }

                xmlWriter.writeEndElement();
            }

            if (localRemaining_credit_limitTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Remaining_credit_limit",
                    xmlWriter);

                if (localRemaining_credit_limit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Remaining_credit_limit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRemaining_credit_limit);
                }

                xmlWriter.writeEndElement();
            }

            if (localBill_cycle_dayTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Bill_cycle_day", xmlWriter);

                if (localBill_cycle_day == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Bill_cycle_day cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBill_cycle_day);
                }

                xmlWriter.writeEndElement();
            }

            if (localLast_billing_dateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Last_billing_date",
                    xmlWriter);

                if (localLast_billing_date == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Last_billing_date cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLast_billing_date);
                }

                xmlWriter.writeEndElement();
            }

            if (localPayment_due_dateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Payment_due_date", xmlWriter);

                if (localPayment_due_date == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Payment_due_date cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPayment_due_date);
                }

                xmlWriter.writeEndElement();
            }

            if (localSubscriber_statusTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Subscriber_status",
                    xmlWriter);

                if (localSubscriber_status == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Subscriber_status cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSubscriber_status);
                }

                xmlWriter.writeEndElement();
            }

            if (localStatusCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "StatusCode", xmlWriter);

                if (localStatusCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "StatusCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStatusCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localStatusTextTracker) {
                namespace = "";
                writeStartElement(null, namespace, "StatusText", xmlWriter);

                if (localStatusText == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "StatusText cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStatusText);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreditLimitInfo_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreditLimitInfo_type0 object = new CreditLimitInfo_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"CreditLimitInfo_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CreditLimitInfo_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "Total_credit_limit").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Total_credit_limit" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotal_credit_limit(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "Remaining_credit_limit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Remaining_credit_limit" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRemaining_credit_limit(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Bill_cycle_day").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Bill_cycle_day" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBill_cycle_day(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "Last_billing_date").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Last_billing_date" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLast_billing_date(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Payment_due_date").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Payment_due_date" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPayment_due_date(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "Subscriber_status").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Subscriber_status" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSubscriber_status(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusText").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusText" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class TibcoODPRequest implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd",
                "TibcoODPRequest", "ns1");

        /**
         * field for TRANSACTION_ID
         */
        protected java.lang.String localTRANSACTION_ID;

        /**
         * field for MSISDN
         */
        protected java.lang.String localMSISDN;

        /**
         * field for SOURCE
         */
        protected java.lang.String localSOURCE;

        /**
         * field for SUBSCRIBER_TYPE
         */
        protected java.lang.String localSUBSCRIBER_TYPE;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTRANSACTION_ID() {
            return localTRANSACTION_ID;
        }

        /**
         * Auto generated setter method
         * @param param TRANSACTION_ID
         */
        public void setTRANSACTION_ID(java.lang.String param) {
            this.localTRANSACTION_ID = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMSISDN() {
            return localMSISDN;
        }

        /**
         * Auto generated setter method
         * @param param MSISDN
         */
        public void setMSISDN(java.lang.String param) {
            this.localMSISDN = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSOURCE() {
            return localSOURCE;
        }

        /**
         * Auto generated setter method
         * @param param SOURCE
         */
        public void setSOURCE(java.lang.String param) {
            this.localSOURCE = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSUBSCRIBER_TYPE() {
            return localSUBSCRIBER_TYPE;
        }

        /**
         * Auto generated setter method
         * @param param SUBSCRIBER_TYPE
         */
        public void setSUBSCRIBER_TYPE(java.lang.String param) {
            this.localSUBSCRIBER_TYPE = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":TibcoODPRequest", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "TibcoODPRequest", xmlWriter);
                }
            }

            namespace = "";
            writeStartElement(null, namespace, "TRANSACTION_ID", xmlWriter);

            if (localTRANSACTION_ID == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "TRANSACTION_ID cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localTRANSACTION_ID);
            }

            xmlWriter.writeEndElement();

            namespace = "";
            writeStartElement(null, namespace, "MSISDN", xmlWriter);

            if (localMSISDN == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "MSISDN cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localMSISDN);
            }

            xmlWriter.writeEndElement();

            namespace = "";
            writeStartElement(null, namespace, "SOURCE", xmlWriter);

            if (localSOURCE == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "SOURCE cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localSOURCE);
            }

            xmlWriter.writeEndElement();

            namespace = "";
            writeStartElement(null, namespace, "SUBSCRIBER_TYPE", xmlWriter);

            if (localSUBSCRIBER_TYPE == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "SUBSCRIBER_TYPE cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localSUBSCRIBER_TYPE);
            }

            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TibcoODPRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                TibcoODPRequest object = new TibcoODPRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"TibcoODPRequest".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (TibcoODPRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TRANSACTION_ID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TRANSACTION_ID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTRANSACTION_ID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "MSISDN").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MSISDN" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMSISDN(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SOURCE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SOURCE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSOURCE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SUBSCRIBER_TYPE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SUBSCRIBER_TYPE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSUBSCRIBER_TYPE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class TKCINFO_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = TKCINFO_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for Mon_Loyalty_Prev_Month
         */
        protected java.lang.String localMon_Loyalty_Prev_Month;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMon_Loyalty_Prev_MonthTracker = false;

        /**
         * field for Mon_Loyalty_Cur_Month
         */
        protected java.lang.String localMon_Loyalty_Cur_Month;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMon_Loyalty_Cur_MonthTracker = false;

        /**
         * field for Pacuan_Activation_Point
         */
        protected java.lang.String localPacuan_Activation_Point;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPacuan_Activation_PointTracker = false;

        /**
         * field for StatusCode
         */
        protected java.lang.String localStatusCode;

        /**
         * field for StatusText
         */
        protected java.lang.String localStatusText;

        public boolean isMon_Loyalty_Prev_MonthSpecified() {
            return localMon_Loyalty_Prev_MonthTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMon_Loyalty_Prev_Month() {
            return localMon_Loyalty_Prev_Month;
        }

        /**
         * Auto generated setter method
         * @param param Mon_Loyalty_Prev_Month
         */
        public void setMon_Loyalty_Prev_Month(java.lang.String param) {
            localMon_Loyalty_Prev_MonthTracker = param != null;

            this.localMon_Loyalty_Prev_Month = param;
        }

        public boolean isMon_Loyalty_Cur_MonthSpecified() {
            return localMon_Loyalty_Cur_MonthTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMon_Loyalty_Cur_Month() {
            return localMon_Loyalty_Cur_Month;
        }

        /**
         * Auto generated setter method
         * @param param Mon_Loyalty_Cur_Month
         */
        public void setMon_Loyalty_Cur_Month(java.lang.String param) {
            localMon_Loyalty_Cur_MonthTracker = param != null;

            this.localMon_Loyalty_Cur_Month = param;
        }

        public boolean isPacuan_Activation_PointSpecified() {
            return localPacuan_Activation_PointTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPacuan_Activation_Point() {
            return localPacuan_Activation_Point;
        }

        /**
         * Auto generated setter method
         * @param param Pacuan_Activation_Point
         */
        public void setPacuan_Activation_Point(java.lang.String param) {
            localPacuan_Activation_PointTracker = param != null;

            this.localPacuan_Activation_Point = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusCode() {
            return localStatusCode;
        }

        /**
         * Auto generated setter method
         * @param param StatusCode
         */
        public void setStatusCode(java.lang.String param) {
            this.localStatusCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusText() {
            return localStatusText;
        }

        /**
         * Auto generated setter method
         * @param param StatusText
         */
        public void setStatusText(java.lang.String param) {
            this.localStatusText = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":TKCINFO_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "TKCINFO_type0", xmlWriter);
                }
            }

            if (localMon_Loyalty_Prev_MonthTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Mon_Loyalty_Prev_Month",
                    xmlWriter);

                if (localMon_Loyalty_Prev_Month == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Mon_Loyalty_Prev_Month cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMon_Loyalty_Prev_Month);
                }

                xmlWriter.writeEndElement();
            }

            if (localMon_Loyalty_Cur_MonthTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Mon_Loyalty_Cur_Month",
                    xmlWriter);

                if (localMon_Loyalty_Cur_Month == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Mon_Loyalty_Cur_Month cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMon_Loyalty_Cur_Month);
                }

                xmlWriter.writeEndElement();
            }

            if (localPacuan_Activation_PointTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Pacuan_Activation_Point",
                    xmlWriter);

                if (localPacuan_Activation_Point == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Pacuan_Activation_Point cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPacuan_Activation_Point);
                }

                xmlWriter.writeEndElement();
            }

            namespace = "";
            writeStartElement(null, namespace, "StatusCode", xmlWriter);

            if (localStatusCode == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusCode cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatusCode);
            }

            xmlWriter.writeEndElement();

            namespace = "";
            writeStartElement(null, namespace, "StatusText", xmlWriter);

            if (localStatusText == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusText cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatusText);
            }

            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TKCINFO_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                TKCINFO_type0 object = new TKCINFO_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"TKCINFO_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (TKCINFO_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "Mon_Loyalty_Prev_Month").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Mon_Loyalty_Prev_Month" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMon_Loyalty_Prev_Month(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "Mon_Loyalty_Cur_Month").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Mon_Loyalty_Cur_Month" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMon_Loyalty_Cur_Month(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "Pacuan_Activation_Point").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Pacuan_Activation_Point" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPacuan_Activation_Point(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusText").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusText" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DuePaymentInfo_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = DuePaymentInfo_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for DuePaymentInfoDetails
         * This was an Array!
         */
        protected DuePaymentInfoDetails_type0[] localDuePaymentInfoDetails;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDuePaymentInfoDetailsTracker = false;

        /**
         * field for StatusCode
         */
        protected java.lang.String localStatusCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStatusCodeTracker = false;

        /**
         * field for StatusText
         */
        protected java.lang.String localStatusText;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStatusTextTracker = false;

        public boolean isDuePaymentInfoDetailsSpecified() {
            return localDuePaymentInfoDetailsTracker;
        }

        /**
         * Auto generated getter method
         * @return DuePaymentInfoDetails_type0[]
         */
        public DuePaymentInfoDetails_type0[] getDuePaymentInfoDetails() {
            return localDuePaymentInfoDetails;
        }

        /**
         * validate the array for DuePaymentInfoDetails
         */
        protected void validateDuePaymentInfoDetails(
            DuePaymentInfoDetails_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param DuePaymentInfoDetails
         */
        public void setDuePaymentInfoDetails(
            DuePaymentInfoDetails_type0[] param) {
            validateDuePaymentInfoDetails(param);

            localDuePaymentInfoDetailsTracker = param != null;

            this.localDuePaymentInfoDetails = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param DuePaymentInfoDetails_type0
         */
        public void addDuePaymentInfoDetails(DuePaymentInfoDetails_type0 param) {
            if (localDuePaymentInfoDetails == null) {
                localDuePaymentInfoDetails = new DuePaymentInfoDetails_type0[] {  };
            }

            //update the setting tracker
            localDuePaymentInfoDetailsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localDuePaymentInfoDetails);
            list.add(param);
            this.localDuePaymentInfoDetails = (DuePaymentInfoDetails_type0[]) list.toArray(new DuePaymentInfoDetails_type0[list.size()]);
        }

        public boolean isStatusCodeSpecified() {
            return localStatusCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusCode() {
            return localStatusCode;
        }

        /**
         * Auto generated setter method
         * @param param StatusCode
         */
        public void setStatusCode(java.lang.String param) {
            localStatusCodeTracker = param != null;

            this.localStatusCode = param;
        }

        public boolean isStatusTextSpecified() {
            return localStatusTextTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusText() {
            return localStatusText;
        }

        /**
         * Auto generated setter method
         * @param param StatusText
         */
        public void setStatusText(java.lang.String param) {
            localStatusTextTracker = param != null;

            this.localStatusText = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DuePaymentInfo_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DuePaymentInfo_type0", xmlWriter);
                }
            }

            if (localDuePaymentInfoDetailsTracker) {
                if (localDuePaymentInfoDetails != null) {
                    for (int i = 0; i < localDuePaymentInfoDetails.length;
                            i++) {
                        if (localDuePaymentInfoDetails[i] != null) {
                            localDuePaymentInfoDetails[i].serialize(new javax.xml.namespace.QName(
                                    "", "DuePaymentInfoDetails"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "DuePaymentInfoDetails cannot be null!!");
                }
            }

            if (localStatusCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "StatusCode", xmlWriter);

                if (localStatusCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "StatusCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStatusCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localStatusTextTracker) {
                namespace = "";
                writeStartElement(null, namespace, "StatusText", xmlWriter);

                if (localStatusText == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "StatusText cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStatusText);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DuePaymentInfo_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DuePaymentInfo_type0 object = new DuePaymentInfo_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DuePaymentInfo_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DuePaymentInfo_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "DuePaymentInfoDetails").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(DuePaymentInfoDetails_type0.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "DuePaymentInfoDetails").equals(
                                            reader.getName())) {
                                    list1.add(DuePaymentInfoDetails_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setDuePaymentInfoDetails((DuePaymentInfoDetails_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                DuePaymentInfoDetails_type0.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusText").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusText" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BONUS_INFO_type1 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = BONUS_INFO_type1
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for Attribute
         * This was an Array!
         */
        protected Attribute_type1[] localAttribute;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttributeTracker = false;

        public boolean isAttributeSpecified() {
            return localAttributeTracker;
        }

        /**
         * Auto generated getter method
         * @return Attribute_type1[]
         */
        public Attribute_type1[] getAttribute() {
            return localAttribute;
        }

        /**
         * validate the array for Attribute
         */
        protected void validateAttribute(Attribute_type1[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Attribute
         */
        public void setAttribute(Attribute_type1[] param) {
            validateAttribute(param);

            localAttributeTracker = param != null;

            this.localAttribute = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param Attribute_type1
         */
        public void addAttribute(Attribute_type1 param) {
            if (localAttribute == null) {
                localAttribute = new Attribute_type1[] {  };
            }

            //update the setting tracker
            localAttributeTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localAttribute);
            list.add(param);
            this.localAttribute = (Attribute_type1[]) list.toArray(new Attribute_type1[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":BONUS_INFO_type1", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "BONUS_INFO_type1", xmlWriter);
                }
            }

            if (localAttributeTracker) {
                if (localAttribute != null) {
                    for (int i = 0; i < localAttribute.length; i++) {
                        if (localAttribute[i] != null) {
                            localAttribute[i].serialize(new javax.xml.namespace.QName(
                                    "", "Attribute"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Attribute cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BONUS_INFO_type1 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BONUS_INFO_type1 object = new BONUS_INFO_type1();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"BONUS_INFO_type1".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BONUS_INFO_type1) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Attribute").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(Attribute_type1.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "Attribute").equals(
                                            reader.getName())) {
                                    list1.add(Attribute_type1.Factory.parse(
                                            reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setAttribute((Attribute_type1[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                Attribute_type1.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Bonus_Details_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Bonus_Details_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for BONUS_ITEM
         * This was an Array!
         */
        protected BONUS_ITEM_type0[] localBONUS_ITEM;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBONUS_ITEMTracker = false;

        public boolean isBONUS_ITEMSpecified() {
            return localBONUS_ITEMTracker;
        }

        /**
         * Auto generated getter method
         * @return BONUS_ITEM_type0[]
         */
        public BONUS_ITEM_type0[] getBONUS_ITEM() {
            return localBONUS_ITEM;
        }

        /**
         * validate the array for BONUS_ITEM
         */
        protected void validateBONUS_ITEM(BONUS_ITEM_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param BONUS_ITEM
         */
        public void setBONUS_ITEM(BONUS_ITEM_type0[] param) {
            validateBONUS_ITEM(param);

            localBONUS_ITEMTracker = param != null;

            this.localBONUS_ITEM = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param BONUS_ITEM_type0
         */
        public void addBONUS_ITEM(BONUS_ITEM_type0 param) {
            if (localBONUS_ITEM == null) {
                localBONUS_ITEM = new BONUS_ITEM_type0[] {  };
            }

            //update the setting tracker
            localBONUS_ITEMTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localBONUS_ITEM);
            list.add(param);
            this.localBONUS_ITEM = (BONUS_ITEM_type0[]) list.toArray(new BONUS_ITEM_type0[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Bonus_Details_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Bonus_Details_type0", xmlWriter);
                }
            }

            if (localBONUS_ITEMTracker) {
                if (localBONUS_ITEM != null) {
                    for (int i = 0; i < localBONUS_ITEM.length; i++) {
                        if (localBONUS_ITEM[i] != null) {
                            localBONUS_ITEM[i].serialize(new javax.xml.namespace.QName(
                                    "", "BONUS_ITEM"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "BONUS_ITEM cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Bonus_Details_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Bonus_Details_type0 object = new Bonus_Details_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Bonus_Details_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Bonus_Details_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BONUS_ITEM").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(BONUS_ITEM_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "BONUS_ITEM").equals(
                                            reader.getName())) {
                                    list1.add(BONUS_ITEM_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setBONUS_ITEM((BONUS_ITEM_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                BONUS_ITEM_type0.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BONUS_INFO_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = BONUS_INFO_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for Attribute
         * This was an Array!
         */
        protected Attribute_type0[] localAttribute;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttributeTracker = false;

        /**
         * field for StatusCode
         */
        protected java.lang.String localStatusCode;

        /**
         * field for StatusText
         */
        protected java.lang.String localStatusText;

        public boolean isAttributeSpecified() {
            return localAttributeTracker;
        }

        /**
         * Auto generated getter method
         * @return Attribute_type0[]
         */
        public Attribute_type0[] getAttribute() {
            return localAttribute;
        }

        /**
         * validate the array for Attribute
         */
        protected void validateAttribute(Attribute_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Attribute
         */
        public void setAttribute(Attribute_type0[] param) {
            validateAttribute(param);

            localAttributeTracker = param != null;

            this.localAttribute = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param Attribute_type0
         */
        public void addAttribute(Attribute_type0 param) {
            if (localAttribute == null) {
                localAttribute = new Attribute_type0[] {  };
            }

            //update the setting tracker
            localAttributeTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localAttribute);
            list.add(param);
            this.localAttribute = (Attribute_type0[]) list.toArray(new Attribute_type0[list.size()]);
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusCode() {
            return localStatusCode;
        }

        /**
         * Auto generated setter method
         * @param param StatusCode
         */
        public void setStatusCode(java.lang.String param) {
            this.localStatusCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusText() {
            return localStatusText;
        }

        /**
         * Auto generated setter method
         * @param param StatusText
         */
        public void setStatusText(java.lang.String param) {
            this.localStatusText = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":BONUS_INFO_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "BONUS_INFO_type0", xmlWriter);
                }
            }

            if (localAttributeTracker) {
                if (localAttribute != null) {
                    for (int i = 0; i < localAttribute.length; i++) {
                        if (localAttribute[i] != null) {
                            localAttribute[i].serialize(new javax.xml.namespace.QName(
                                    "", "Attribute"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Attribute cannot be null!!");
                }
            }

            namespace = "";
            writeStartElement(null, namespace, "StatusCode", xmlWriter);

            if (localStatusCode == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusCode cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatusCode);
            }

            xmlWriter.writeEndElement();

            namespace = "";
            writeStartElement(null, namespace, "StatusText", xmlWriter);

            if (localStatusText == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusText cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatusText);
            }

            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BONUS_INFO_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BONUS_INFO_type0 object = new BONUS_INFO_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"BONUS_INFO_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BONUS_INFO_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Attribute").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(Attribute_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "Attribute").equals(
                                            reader.getName())) {
                                    list1.add(Attribute_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setAttribute((Attribute_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                Attribute_type0.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusText").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusText" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SubsriberInfo_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = SubsriberInfo_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for Total_Balance
         */
        protected java.lang.String localTotal_Balance;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotal_BalanceTracker = false;

        /**
         * field for Main_Account_Balance
         */
        protected java.lang.String localMain_Account_Balance;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMain_Account_BalanceTracker = false;

        /**
         * field for OnNet_Bal
         */
        protected java.lang.String localOnNet_Bal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOnNet_BalTracker = false;

        /**
         * field for OffNet_Bal
         */
        protected java.lang.String localOffNet_Bal;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOffNet_BalTracker = false;

        /**
         * field for Expiry_Date
         */
        protected java.lang.String localExpiry_Date;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExpiry_DateTracker = false;

        /**
         * field for Subscription_Type
         */
        protected java.lang.String localSubscription_Type;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSubscription_TypeTracker = false;

        /**
         * field for HYBRID_Type
         */
        protected java.lang.String localHYBRID_Type;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHYBRID_TypeTracker = false;

        /**
         * field for Call_Plan
         */
        protected java.lang.String localCall_Plan;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCall_PlanTracker = false;

        /**
         * field for Payment_type
         */
        protected java.lang.String localPayment_type;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPayment_typeTracker = false;

        /**
         * field for Ebill_mail_id
         */
        protected java.lang.String localEbill_mail_id;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEbill_mail_idTracker = false;

        /**
         * field for StatusCode
         */
        protected java.lang.String localStatusCode;

        /**
         * field for StatusText
         */
        protected java.lang.String localStatusText;

        public boolean isTotal_BalanceSpecified() {
            return localTotal_BalanceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTotal_Balance() {
            return localTotal_Balance;
        }

        /**
         * Auto generated setter method
         * @param param Total_Balance
         */
        public void setTotal_Balance(java.lang.String param) {
            localTotal_BalanceTracker = param != null;

            this.localTotal_Balance = param;
        }

        public boolean isMain_Account_BalanceSpecified() {
            return localMain_Account_BalanceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMain_Account_Balance() {
            return localMain_Account_Balance;
        }

        /**
         * Auto generated setter method
         * @param param Main_Account_Balance
         */
        public void setMain_Account_Balance(java.lang.String param) {
            localMain_Account_BalanceTracker = param != null;

            this.localMain_Account_Balance = param;
        }

        public boolean isOnNet_BalSpecified() {
            return localOnNet_BalTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOnNet_Bal() {
            return localOnNet_Bal;
        }

        /**
         * Auto generated setter method
         * @param param OnNet_Bal
         */
        public void setOnNet_Bal(java.lang.String param) {
            localOnNet_BalTracker = param != null;

            this.localOnNet_Bal = param;
        }

        public boolean isOffNet_BalSpecified() {
            return localOffNet_BalTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOffNet_Bal() {
            return localOffNet_Bal;
        }

        /**
         * Auto generated setter method
         * @param param OffNet_Bal
         */
        public void setOffNet_Bal(java.lang.String param) {
            localOffNet_BalTracker = param != null;

            this.localOffNet_Bal = param;
        }

        public boolean isExpiry_DateSpecified() {
            return localExpiry_DateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getExpiry_Date() {
            return localExpiry_Date;
        }

        /**
         * Auto generated setter method
         * @param param Expiry_Date
         */
        public void setExpiry_Date(java.lang.String param) {
            localExpiry_DateTracker = param != null;

            this.localExpiry_Date = param;
        }

        public boolean isSubscription_TypeSpecified() {
            return localSubscription_TypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSubscription_Type() {
            return localSubscription_Type;
        }

        /**
         * Auto generated setter method
         * @param param Subscription_Type
         */
        public void setSubscription_Type(java.lang.String param) {
            localSubscription_TypeTracker = param != null;

            this.localSubscription_Type = param;
        }

        public boolean isHYBRID_TypeSpecified() {
            return localHYBRID_TypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHYBRID_Type() {
            return localHYBRID_Type;
        }

        /**
         * Auto generated setter method
         * @param param HYBRID_Type
         */
        public void setHYBRID_Type(java.lang.String param) {
            localHYBRID_TypeTracker = param != null;

            this.localHYBRID_Type = param;
        }

        public boolean isCall_PlanSpecified() {
            return localCall_PlanTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCall_Plan() {
            return localCall_Plan;
        }

        /**
         * Auto generated setter method
         * @param param Call_Plan
         */
        public void setCall_Plan(java.lang.String param) {
            localCall_PlanTracker = param != null;

            this.localCall_Plan = param;
        }

        public boolean isPayment_typeSpecified() {
            return localPayment_typeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPayment_type() {
            return localPayment_type;
        }

        /**
         * Auto generated setter method
         * @param param Payment_type
         */
        public void setPayment_type(java.lang.String param) {
            localPayment_typeTracker = param != null;

            this.localPayment_type = param;
        }

        public boolean isEbill_mail_idSpecified() {
            return localEbill_mail_idTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEbill_mail_id() {
            return localEbill_mail_id;
        }

        /**
         * Auto generated setter method
         * @param param Ebill_mail_id
         */
        public void setEbill_mail_id(java.lang.String param) {
            localEbill_mail_idTracker = param != null;

            this.localEbill_mail_id = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusCode() {
            return localStatusCode;
        }

        /**
         * Auto generated setter method
         * @param param StatusCode
         */
        public void setStatusCode(java.lang.String param) {
            this.localStatusCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusText() {
            return localStatusText;
        }

        /**
         * Auto generated setter method
         * @param param StatusText
         */
        public void setStatusText(java.lang.String param) {
            this.localStatusText = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":SubsriberInfo_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "SubsriberInfo_type0", xmlWriter);
                }
            }

            if (localTotal_BalanceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Total_Balance", xmlWriter);

                if (localTotal_Balance == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Total_Balance cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTotal_Balance);
                }

                xmlWriter.writeEndElement();
            }

            if (localMain_Account_BalanceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Main_Account_Balance",
                    xmlWriter);

                if (localMain_Account_Balance == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Main_Account_Balance cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMain_Account_Balance);
                }

                xmlWriter.writeEndElement();
            }

            if (localOnNet_BalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "On-Net_Bal", xmlWriter);

                if (localOnNet_Bal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "On-Net_Bal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOnNet_Bal);
                }

                xmlWriter.writeEndElement();
            }

            if (localOffNet_BalTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Off-Net_Bal", xmlWriter);

                if (localOffNet_Bal == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Off-Net_Bal cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOffNet_Bal);
                }

                xmlWriter.writeEndElement();
            }

            if (localExpiry_DateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Expiry_Date", xmlWriter);

                if (localExpiry_Date == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Expiry_Date cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localExpiry_Date);
                }

                xmlWriter.writeEndElement();
            }

            if (localSubscription_TypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Subscription_Type",
                    xmlWriter);

                if (localSubscription_Type == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Subscription_Type cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSubscription_Type);
                }

                xmlWriter.writeEndElement();
            }

            if (localHYBRID_TypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "HYBRID_Type", xmlWriter);

                if (localHYBRID_Type == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "HYBRID_Type cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localHYBRID_Type);
                }

                xmlWriter.writeEndElement();
            }

            if (localCall_PlanTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Call_Plan", xmlWriter);

                if (localCall_Plan == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Call_Plan cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCall_Plan);
                }

                xmlWriter.writeEndElement();
            }

            if (localPayment_typeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Payment_type", xmlWriter);

                if (localPayment_type == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Payment_type cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPayment_type);
                }

                xmlWriter.writeEndElement();
            }

            if (localEbill_mail_idTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Ebill_mail_id", xmlWriter);

                if (localEbill_mail_id == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Ebill_mail_id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEbill_mail_id);
                }

                xmlWriter.writeEndElement();
            }

            namespace = "";
            writeStartElement(null, namespace, "StatusCode", xmlWriter);

            if (localStatusCode == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusCode cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatusCode);
            }

            xmlWriter.writeEndElement();

            namespace = "";
            writeStartElement(null, namespace, "StatusText", xmlWriter);

            if (localStatusText == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusText cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatusText);
            }

            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SubsriberInfo_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SubsriberInfo_type0 object = new SubsriberInfo_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"SubsriberInfo_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (SubsriberInfo_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Total_Balance").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Total_Balance" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotal_Balance(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "Main_Account_Balance").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Main_Account_Balance" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMain_Account_Balance(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "On-Net_Bal").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "On-Net_Bal" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOnNet_Bal(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Off-Net_Bal").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Off-Net_Bal" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOffNet_Bal(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Expiry_Date").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Expiry_Date" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setExpiry_Date(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "Subscription_Type").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Subscription_Type" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSubscription_Type(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "HYBRID_Type").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "HYBRID_Type" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHYBRID_Type(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Call_Plan").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Call_Plan" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCall_Plan(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Payment_type").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Payment_type" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPayment_type(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Ebill_mail_id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Ebill_mail_id" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEbill_mail_id(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusText").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusText" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class TibcoODPResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd",
                "TibcoODPResponse", "ns1");

        /**
         * field for SubsriberInfo
         */
        protected SubsriberInfo_type0 localSubsriberInfo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSubsriberInfoTracker = false;

        /**
         * field for BONUS_INFO
         * This was an Array!
         */
        protected BONUS_INFO_type0[] localBONUS_INFO;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBONUS_INFOTracker = false;

        /**
         * field for TKCINFO
         */
        protected TKCINFO_type0 localTKCINFO;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTKCINFOTracker = false;

        /**
         * field for CreditLimitInfo
         */
        protected CreditLimitInfo_type0 localCreditLimitInfo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditLimitInfoTracker = false;

        /**
         * field for HybridBalanceInfo
         */
        protected HybridBalanceInfo_type0 localHybridBalanceInfo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHybridBalanceInfoTracker = false;

        /**
         * field for DuePaymentInfo
         */
        protected DuePaymentInfo_type0 localDuePaymentInfo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDuePaymentInfoTracker = false;

        /**
         * field for SQBonusInfo
         */
        protected SQBonusInfo_type0 localSQBonusInfo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSQBonusInfoTracker = false;

        /**
         * field for Bonus_Details
         */
        protected Bonus_Details_type0 localBonus_Details;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBonus_DetailsTracker = false;

        /**
         * field for SubscriberName
         */
        protected java.lang.String localSubscriberName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSubscriberNameTracker = false;

        public boolean isSubsriberInfoSpecified() {
            return localSubsriberInfoTracker;
        }

        /**
         * Auto generated getter method
         * @return SubsriberInfo_type0
         */
        public SubsriberInfo_type0 getSubsriberInfo() {
            return localSubsriberInfo;
        }

        /**
         * Auto generated setter method
         * @param param SubsriberInfo
         */
        public void setSubsriberInfo(SubsriberInfo_type0 param) {
            localSubsriberInfoTracker = param != null;

            this.localSubsriberInfo = param;
        }

        public boolean isBONUS_INFOSpecified() {
            return localBONUS_INFOTracker;
        }

        /**
         * Auto generated getter method
         * @return BONUS_INFO_type0[]
         */
        public BONUS_INFO_type0[] getBONUS_INFO() {
            return localBONUS_INFO;
        }

        /**
         * validate the array for BONUS_INFO
         */
        protected void validateBONUS_INFO(BONUS_INFO_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param BONUS_INFO
         */
        public void setBONUS_INFO(BONUS_INFO_type0[] param) {
            validateBONUS_INFO(param);

            localBONUS_INFOTracker = param != null;

            this.localBONUS_INFO = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param BONUS_INFO_type0
         */
        public void addBONUS_INFO(BONUS_INFO_type0 param) {
            if (localBONUS_INFO == null) {
                localBONUS_INFO = new BONUS_INFO_type0[] {  };
            }

            //update the setting tracker
            localBONUS_INFOTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localBONUS_INFO);
            list.add(param);
            this.localBONUS_INFO = (BONUS_INFO_type0[]) list.toArray(new BONUS_INFO_type0[list.size()]);
        }

        public boolean isTKCINFOSpecified() {
            return localTKCINFOTracker;
        }

        /**
         * Auto generated getter method
         * @return TKCINFO_type0
         */
        public TKCINFO_type0 getTKCINFO() {
            return localTKCINFO;
        }

        /**
         * Auto generated setter method
         * @param param TKCINFO
         */
        public void setTKCINFO(TKCINFO_type0 param) {
            localTKCINFOTracker = param != null;

            this.localTKCINFO = param;
        }

        public boolean isCreditLimitInfoSpecified() {
            return localCreditLimitInfoTracker;
        }

        /**
         * Auto generated getter method
         * @return CreditLimitInfo_type0
         */
        public CreditLimitInfo_type0 getCreditLimitInfo() {
            return localCreditLimitInfo;
        }

        /**
         * Auto generated setter method
         * @param param CreditLimitInfo
         */
        public void setCreditLimitInfo(CreditLimitInfo_type0 param) {
            localCreditLimitInfoTracker = param != null;

            this.localCreditLimitInfo = param;
        }

        public boolean isHybridBalanceInfoSpecified() {
            return localHybridBalanceInfoTracker;
        }

        /**
         * Auto generated getter method
         * @return HybridBalanceInfo_type0
         */
        public HybridBalanceInfo_type0 getHybridBalanceInfo() {
            return localHybridBalanceInfo;
        }

        /**
         * Auto generated setter method
         * @param param HybridBalanceInfo
         */
        public void setHybridBalanceInfo(HybridBalanceInfo_type0 param) {
            localHybridBalanceInfoTracker = param != null;

            this.localHybridBalanceInfo = param;
        }

        public boolean isDuePaymentInfoSpecified() {
            return localDuePaymentInfoTracker;
        }

        /**
         * Auto generated getter method
         * @return DuePaymentInfo_type0
         */
        public DuePaymentInfo_type0 getDuePaymentInfo() {
            return localDuePaymentInfo;
        }

        /**
         * Auto generated setter method
         * @param param DuePaymentInfo
         */
        public void setDuePaymentInfo(DuePaymentInfo_type0 param) {
            localDuePaymentInfoTracker = param != null;

            this.localDuePaymentInfo = param;
        }

        public boolean isSQBonusInfoSpecified() {
            return localSQBonusInfoTracker;
        }

        /**
         * Auto generated getter method
         * @return SQBonusInfo_type0
         */
        public SQBonusInfo_type0 getSQBonusInfo() {
            return localSQBonusInfo;
        }

        /**
         * Auto generated setter method
         * @param param SQBonusInfo
         */
        public void setSQBonusInfo(SQBonusInfo_type0 param) {
            localSQBonusInfoTracker = param != null;

            this.localSQBonusInfo = param;
        }

        public boolean isBonus_DetailsSpecified() {
            return localBonus_DetailsTracker;
        }

        /**
         * Auto generated getter method
         * @return Bonus_Details_type0
         */
        public Bonus_Details_type0 getBonus_Details() {
            return localBonus_Details;
        }

        /**
         * Auto generated setter method
         * @param param Bonus_Details
         */
        public void setBonus_Details(Bonus_Details_type0 param) {
            localBonus_DetailsTracker = param != null;

            this.localBonus_Details = param;
        }

        public boolean isSubscriberNameSpecified() {
            return localSubscriberNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSubscriberName() {
            return localSubscriberName;
        }

        /**
         * Auto generated setter method
         * @param param SubscriberName
         */
        public void setSubscriberName(java.lang.String param) {
            localSubscriberNameTracker = param != null;

            this.localSubscriberName = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":TibcoODPResponse", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "TibcoODPResponse", xmlWriter);
                }
            }

            if (localSubsriberInfoTracker) {
                if (localSubsriberInfo == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "SubsriberInfo cannot be null!!");
                }

                localSubsriberInfo.serialize(new javax.xml.namespace.QName("",
                        "SubsriberInfo"), xmlWriter);
            }

            if (localBONUS_INFOTracker) {
                if (localBONUS_INFO != null) {
                    for (int i = 0; i < localBONUS_INFO.length; i++) {
                        if (localBONUS_INFO[i] != null) {
                            localBONUS_INFO[i].serialize(new javax.xml.namespace.QName(
                                    "", "BONUS_INFO"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "BONUS_INFO cannot be null!!");
                }
            }

            if (localTKCINFOTracker) {
                if (localTKCINFO == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "TKCINFO cannot be null!!");
                }

                localTKCINFO.serialize(new javax.xml.namespace.QName("",
                        "TKCINFO"), xmlWriter);
            }

            if (localCreditLimitInfoTracker) {
                if (localCreditLimitInfo == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "CreditLimitInfo cannot be null!!");
                }

                localCreditLimitInfo.serialize(new javax.xml.namespace.QName(
                        "", "CreditLimitInfo"), xmlWriter);
            }

            if (localHybridBalanceInfoTracker) {
                if (localHybridBalanceInfo == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "HybridBalanceInfo cannot be null!!");
                }

                localHybridBalanceInfo.serialize(new javax.xml.namespace.QName(
                        "", "HybridBalanceInfo"), xmlWriter);
            }

            if (localDuePaymentInfoTracker) {
                if (localDuePaymentInfo == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "DuePaymentInfo cannot be null!!");
                }

                localDuePaymentInfo.serialize(new javax.xml.namespace.QName(
                        "", "DuePaymentInfo"), xmlWriter);
            }

            if (localSQBonusInfoTracker) {
                if (localSQBonusInfo == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "SQBonusInfo cannot be null!!");
                }

                localSQBonusInfo.serialize(new javax.xml.namespace.QName("",
                        "SQBonusInfo"), xmlWriter);
            }

            if (localBonus_DetailsTracker) {
                if (localBonus_Details == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Bonus_Details cannot be null!!");
                }

                localBonus_Details.serialize(new javax.xml.namespace.QName("",
                        "Bonus_Details"), xmlWriter);
            }

            if (localSubscriberNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SubscriberName", xmlWriter);

                if (localSubscriberName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SubscriberName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSubscriberName);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TibcoODPResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                TibcoODPResponse object = new TibcoODPResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"TibcoODPResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (TibcoODPResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list2 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SubsriberInfo").equals(
                                reader.getName())) {
                        object.setSubsriberInfo(SubsriberInfo_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BONUS_INFO").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list2.add(BONUS_INFO_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone2 = false;

                        while (!loopDone2) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone2 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "BONUS_INFO").equals(
                                            reader.getName())) {
                                    list2.add(BONUS_INFO_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone2 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setBONUS_INFO((BONUS_INFO_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                BONUS_INFO_type0.class, list2));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TKCINFO").equals(
                                reader.getName())) {
                        object.setTKCINFO(TKCINFO_type0.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CreditLimitInfo").equals(
                                reader.getName())) {
                        object.setCreditLimitInfo(CreditLimitInfo_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "HybridBalanceInfo").equals(reader.getName())) {
                        object.setHybridBalanceInfo(HybridBalanceInfo_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "DuePaymentInfo").equals(
                                reader.getName())) {
                        object.setDuePaymentInfo(DuePaymentInfo_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SQBonusInfo").equals(
                                reader.getName())) {
                        object.setSQBonusInfo(SQBonusInfo_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Bonus_Details").equals(
                                reader.getName())) {
                        object.setBonus_Details(Bonus_Details_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SubscriberName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SubscriberName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSubscriberName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AttribDtl_type1 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = AttribDtl_type1
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for String
         */
        protected java.lang.String localString;

        /**
         * field for Name
         * This was an Attribute!
         */
        protected java.lang.String localName;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getString() {
            return localString;
        }

        /**
         * Auto generated setter method
         * @param param String
         */
        public void setString(java.lang.String param) {
            this.localString = param;
        }

        public java.lang.String toString() {
            return localString.toString();
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         * @param param Name
         */
        public void setName(java.lang.String param) {
            this.localName = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":AttribDtl_type1", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "AttribDtl_type1", xmlWriter);
                }
            }

            if (localName != null) {
                writeAttribute("", "Name",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localName), xmlWriter);
            }

            if (localString == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "string cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localString);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static AttribDtl_type1 fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                AttribDtl_type1 returnValue = new AttribDtl_type1();

                returnValue.setString(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        value));

                return returnValue;
            }

            public static AttribDtl_type1 fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return AttribDtl_type1.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return AttribDtl_type1.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AttribDtl_type1 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AttribDtl_type1 object = new AttribDtl_type1();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"AttribDtl_type1".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (AttribDtl_type1) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "Name"
                    java.lang.String tempAttribName = reader.getAttributeValue(null,
                            "Name");

                    if (tempAttribName != null) {
                        java.lang.String content = tempAttribName;

                        object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribName));
                    } else {
                    }

                    handledAttributes.add("Name");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "string" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setString(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class HybridBalanceInfo_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = HybridBalanceInfo_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for SubscriberRegistrationDate
         */
        protected java.lang.String localSubscriberRegistrationDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSubscriberRegistrationDateTracker = false;

        /**
         * field for SubscriberStatus
         */
        protected java.lang.String localSubscriberStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSubscriberStatusTracker = false;

        /**
         * field for BillCycle
         */
        protected java.lang.String localBillCycle;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBillCycleTracker = false;

        /**
         * field for LastBillDate
         */
        protected java.lang.String localLastBillDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastBillDateTracker = false;

        /**
         * field for CreditLimit
         */
        protected java.lang.String localCreditLimit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditLimitTracker = false;

        /**
         * field for AvailableCredit
         */
        protected java.lang.String localAvailableCredit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAvailableCreditTracker = false;

        /**
         * field for OutstandingBalance
         */
        protected java.lang.String localOutstandingBalance;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOutstandingBalanceTracker = false;

        /**
         * field for PreviousDue
         */
        protected java.lang.String localPreviousDue;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPreviousDueTracker = false;

        /**
         * field for PaymentDueDate
         */
        protected java.lang.String localPaymentDueDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPaymentDueDateTracker = false;

        /**
         * field for EmailId
         */
        protected java.lang.String localEmailId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmailIdTracker = false;

        /**
         * field for EBill
         */
        protected java.lang.String localEBill;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEBillTracker = false;

        /**
         * field for EReceipt
         */
        protected java.lang.String localEReceipt;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEReceiptTracker = false;

        /**
         * field for StatusCode
         */
        protected java.lang.String localStatusCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStatusCodeTracker = false;

        /**
         * field for StatusText
         */
        protected java.lang.String localStatusText;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStatusTextTracker = false;

        public boolean isSubscriberRegistrationDateSpecified() {
            return localSubscriberRegistrationDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSubscriberRegistrationDate() {
            return localSubscriberRegistrationDate;
        }

        /**
         * Auto generated setter method
         * @param param SubscriberRegistrationDate
         */
        public void setSubscriberRegistrationDate(java.lang.String param) {
            localSubscriberRegistrationDateTracker = param != null;

            this.localSubscriberRegistrationDate = param;
        }

        public boolean isSubscriberStatusSpecified() {
            return localSubscriberStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSubscriberStatus() {
            return localSubscriberStatus;
        }

        /**
         * Auto generated setter method
         * @param param SubscriberStatus
         */
        public void setSubscriberStatus(java.lang.String param) {
            localSubscriberStatusTracker = param != null;

            this.localSubscriberStatus = param;
        }

        public boolean isBillCycleSpecified() {
            return localBillCycleTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBillCycle() {
            return localBillCycle;
        }

        /**
         * Auto generated setter method
         * @param param BillCycle
         */
        public void setBillCycle(java.lang.String param) {
            localBillCycleTracker = param != null;

            this.localBillCycle = param;
        }

        public boolean isLastBillDateSpecified() {
            return localLastBillDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastBillDate() {
            return localLastBillDate;
        }

        /**
         * Auto generated setter method
         * @param param LastBillDate
         */
        public void setLastBillDate(java.lang.String param) {
            localLastBillDateTracker = param != null;

            this.localLastBillDate = param;
        }

        public boolean isCreditLimitSpecified() {
            return localCreditLimitTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreditLimit() {
            return localCreditLimit;
        }

        /**
         * Auto generated setter method
         * @param param CreditLimit
         */
        public void setCreditLimit(java.lang.String param) {
            localCreditLimitTracker = param != null;

            this.localCreditLimit = param;
        }

        public boolean isAvailableCreditSpecified() {
            return localAvailableCreditTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAvailableCredit() {
            return localAvailableCredit;
        }

        /**
         * Auto generated setter method
         * @param param AvailableCredit
         */
        public void setAvailableCredit(java.lang.String param) {
            localAvailableCreditTracker = param != null;

            this.localAvailableCredit = param;
        }

        public boolean isOutstandingBalanceSpecified() {
            return localOutstandingBalanceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOutstandingBalance() {
            return localOutstandingBalance;
        }

        /**
         * Auto generated setter method
         * @param param OutstandingBalance
         */
        public void setOutstandingBalance(java.lang.String param) {
            localOutstandingBalanceTracker = param != null;

            this.localOutstandingBalance = param;
        }

        public boolean isPreviousDueSpecified() {
            return localPreviousDueTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPreviousDue() {
            return localPreviousDue;
        }

        /**
         * Auto generated setter method
         * @param param PreviousDue
         */
        public void setPreviousDue(java.lang.String param) {
            localPreviousDueTracker = param != null;

            this.localPreviousDue = param;
        }

        public boolean isPaymentDueDateSpecified() {
            return localPaymentDueDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPaymentDueDate() {
            return localPaymentDueDate;
        }

        /**
         * Auto generated setter method
         * @param param PaymentDueDate
         */
        public void setPaymentDueDate(java.lang.String param) {
            localPaymentDueDateTracker = param != null;

            this.localPaymentDueDate = param;
        }

        public boolean isEmailIdSpecified() {
            return localEmailIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEmailId() {
            return localEmailId;
        }

        /**
         * Auto generated setter method
         * @param param EmailId
         */
        public void setEmailId(java.lang.String param) {
            localEmailIdTracker = param != null;

            this.localEmailId = param;
        }

        public boolean isEBillSpecified() {
            return localEBillTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEBill() {
            return localEBill;
        }

        /**
         * Auto generated setter method
         * @param param EBill
         */
        public void setEBill(java.lang.String param) {
            localEBillTracker = param != null;

            this.localEBill = param;
        }

        public boolean isEReceiptSpecified() {
            return localEReceiptTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEReceipt() {
            return localEReceipt;
        }

        /**
         * Auto generated setter method
         * @param param EReceipt
         */
        public void setEReceipt(java.lang.String param) {
            localEReceiptTracker = param != null;

            this.localEReceipt = param;
        }

        public boolean isStatusCodeSpecified() {
            return localStatusCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusCode() {
            return localStatusCode;
        }

        /**
         * Auto generated setter method
         * @param param StatusCode
         */
        public void setStatusCode(java.lang.String param) {
            localStatusCodeTracker = param != null;

            this.localStatusCode = param;
        }

        public boolean isStatusTextSpecified() {
            return localStatusTextTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusText() {
            return localStatusText;
        }

        /**
         * Auto generated setter method
         * @param param StatusText
         */
        public void setStatusText(java.lang.String param) {
            localStatusTextTracker = param != null;

            this.localStatusText = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":HybridBalanceInfo_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "HybridBalanceInfo_type0", xmlWriter);
                }
            }

            if (localSubscriberRegistrationDateTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "SubscriberRegistrationDate", xmlWriter);

                if (localSubscriberRegistrationDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SubscriberRegistrationDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSubscriberRegistrationDate);
                }

                xmlWriter.writeEndElement();
            }

            if (localSubscriberStatusTracker) {
                namespace = "";
                writeStartElement(null, namespace, "SubscriberStatus", xmlWriter);

                if (localSubscriberStatus == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SubscriberStatus cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSubscriberStatus);
                }

                xmlWriter.writeEndElement();
            }

            if (localBillCycleTracker) {
                namespace = "";
                writeStartElement(null, namespace, "BillCycle", xmlWriter);

                if (localBillCycle == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BillCycle cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBillCycle);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastBillDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "LastBillDate", xmlWriter);

                if (localLastBillDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "LastBillDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLastBillDate);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreditLimitTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CreditLimit", xmlWriter);

                if (localCreditLimit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CreditLimit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCreditLimit);
                }

                xmlWriter.writeEndElement();
            }

            if (localAvailableCreditTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AvailableCredit", xmlWriter);

                if (localAvailableCredit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AvailableCredit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAvailableCredit);
                }

                xmlWriter.writeEndElement();
            }

            if (localOutstandingBalanceTracker) {
                namespace = "";
                writeStartElement(null, namespace, "OutstandingBalance",
                    xmlWriter);

                if (localOutstandingBalance == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "OutstandingBalance cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOutstandingBalance);
                }

                xmlWriter.writeEndElement();
            }

            if (localPreviousDueTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PreviousDue", xmlWriter);

                if (localPreviousDue == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PreviousDue cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPreviousDue);
                }

                xmlWriter.writeEndElement();
            }

            if (localPaymentDueDateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PaymentDueDate", xmlWriter);

                if (localPaymentDueDate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PaymentDueDate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPaymentDueDate);
                }

                xmlWriter.writeEndElement();
            }

            if (localEmailIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "EmailId", xmlWriter);

                if (localEmailId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "EmailId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEmailId);
                }

                xmlWriter.writeEndElement();
            }

            if (localEBillTracker) {
                namespace = "";
                writeStartElement(null, namespace, "eBill", xmlWriter);

                if (localEBill == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "eBill cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEBill);
                }

                xmlWriter.writeEndElement();
            }

            if (localEReceiptTracker) {
                namespace = "";
                writeStartElement(null, namespace, "eReceipt", xmlWriter);

                if (localEReceipt == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "eReceipt cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEReceipt);
                }

                xmlWriter.writeEndElement();
            }

            if (localStatusCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "StatusCode", xmlWriter);

                if (localStatusCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "StatusCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStatusCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localStatusTextTracker) {
                namespace = "";
                writeStartElement(null, namespace, "StatusText", xmlWriter);

                if (localStatusText == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "StatusText cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStatusText);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static HybridBalanceInfo_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                HybridBalanceInfo_type0 object = new HybridBalanceInfo_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"HybridBalanceInfo_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (HybridBalanceInfo_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "SubscriberRegistrationDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SubscriberRegistrationDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSubscriberRegistrationDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "SubscriberStatus").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SubscriberStatus" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSubscriberStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BillCycle").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BillCycle" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBillCycle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "LastBillDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "LastBillDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastBillDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CreditLimit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CreditLimit" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreditLimit(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "AvailableCredit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AvailableCredit" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAvailableCredit(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "OutstandingBalance").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "OutstandingBalance" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOutstandingBalance(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PreviousDue").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PreviousDue" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPreviousDue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PaymentDueDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PaymentDueDate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPaymentDueDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "EmailId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "EmailId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEmailId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "eBill").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "eBill" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEBill(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "eReceipt").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "eReceipt" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEReceipt(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "StatusText").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusText" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Attribute_type1 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Attribute_type1
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for AttribDtl
         */
        protected AttribDtl_type1 localAttribDtl;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttribDtlTracker = false;

        public boolean isAttribDtlSpecified() {
            return localAttribDtlTracker;
        }

        /**
         * Auto generated getter method
         * @return AttribDtl_type1
         */
        public AttribDtl_type1 getAttribDtl() {
            return localAttribDtl;
        }

        /**
         * Auto generated setter method
         * @param param AttribDtl
         */
        public void setAttribDtl(AttribDtl_type1 param) {
            localAttribDtlTracker = param != null;

            this.localAttribDtl = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Attribute_type1", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Attribute_type1", xmlWriter);
                }
            }

            if (localAttribDtlTracker) {
                if (localAttribDtl == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AttribDtl cannot be null!!");
                }

                localAttribDtl.serialize(new javax.xml.namespace.QName("",
                        "AttribDtl"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Attribute_type1 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Attribute_type1 object = new Attribute_type1();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Attribute_type1".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Attribute_type1) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "AttribDtl").equals(
                                reader.getName())) {
                        object.setAttribDtl(AttribDtl_type1.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AttribDtl_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = AttribDtl_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for String
         */
        protected java.lang.String localString;

        /**
         * field for Name
         * This was an Attribute!
         */
        protected java.lang.String localName;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getString() {
            return localString;
        }

        /**
         * Auto generated setter method
         * @param param String
         */
        public void setString(java.lang.String param) {
            this.localString = param;
        }

        public java.lang.String toString() {
            return localString.toString();
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         * @param param Name
         */
        public void setName(java.lang.String param) {
            this.localName = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":AttribDtl_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "AttribDtl_type0", xmlWriter);
                }
            }

            if (localName != null) {
                writeAttribute("", "Name",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localName), xmlWriter);
            }

            if (localString == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "string cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localString);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static AttribDtl_type0 fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                AttribDtl_type0 returnValue = new AttribDtl_type0();

                returnValue.setString(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        value));

                return returnValue;
            }

            public static AttribDtl_type0 fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return AttribDtl_type0.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return AttribDtl_type0.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AttribDtl_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AttribDtl_type0 object = new AttribDtl_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"AttribDtl_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (AttribDtl_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "Name"
                    java.lang.String tempAttribName = reader.getAttributeValue(null,
                            "Name");

                    if (tempAttribName != null) {
                        java.lang.String content = tempAttribName;

                        object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribName));
                    } else {
                    }

                    handledAttributes.add("Name");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "string" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setString(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BONUS_ITEM_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = BONUS_ITEM_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for BONUS_TYPE
         */
        protected java.lang.String localBONUS_TYPE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBONUS_TYPETracker = false;

        /**
         * field for BONUS_NAME
         */
        protected java.lang.String localBONUS_NAME;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBONUS_NAMETracker = false;

        /**
         * field for START_DATE
         */
        protected java.lang.String localSTART_DATE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSTART_DATETracker = false;

        /**
         * field for END_DATE
         */
        protected java.lang.String localEND_DATE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEND_DATETracker = false;

        /**
         * field for BONUS_STATUS
         */
        protected java.lang.String localBONUS_STATUS;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBONUS_STATUSTracker = false;

        /**
         * field for ALLOCATED_AMOUNT
         */
        protected java.lang.String localALLOCATED_AMOUNT;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localALLOCATED_AMOUNTTracker = false;

        /**
         * field for CONSUMED_AMOUNT
         */
        protected java.lang.String localCONSUMED_AMOUNT;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCONSUMED_AMOUNTTracker = false;

        /**
         * field for REMAINING_AMOUNT
         */
        protected java.lang.String localREMAINING_AMOUNT;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localREMAINING_AMOUNTTracker = false;

        /**
         * field for BONUS_UOM
         */
        protected java.lang.String localBONUS_UOM;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBONUS_UOMTracker = false;

        /**
         * field for ELIGIBILITY_COUNTER
         */
        protected java.lang.String localELIGIBILITY_COUNTER;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localELIGIBILITY_COUNTERTracker = false;

        /**
         * field for QUALIFYING_UNITS
         */
        protected java.lang.String localQUALIFYING_UNITS;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQUALIFYING_UNITSTracker = false;

        /**
         * field for QUALIFYING_UOM
         */
        protected java.lang.String localQUALIFYING_UOM;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQUALIFYING_UOMTracker = false;

        /**
         * field for QUALIFYING_USAGE_SET
         */
        protected java.lang.String localQUALIFYING_USAGE_SET;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localQUALIFYING_USAGE_SETTracker = false;

        /**
         * field for PERIODIC_FEE_DEDUCTION_STATUS
         */
        protected java.lang.String localPERIODIC_FEE_DEDUCTION_STATUS;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPERIODIC_FEE_DEDUCTION_STATUSTracker = false;

        /**
         * field for REGISTRATION_STATUS
         */
        protected java.lang.String localREGISTRATION_STATUS;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localREGISTRATION_STATUSTracker = false;

        /**
         * field for REGISTRATION_STATUS_DATE
         */
        protected java.lang.String localREGISTRATION_STATUS_DATE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localREGISTRATION_STATUS_DATETracker = false;

        /**
         * field for TOPUP_POINTS
         */
        protected java.lang.String localTOPUP_POINTS;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTOPUP_POINTSTracker = false;

        /**
         * field for TOPUP_AMOUNT
         */
        protected java.lang.String localTOPUP_AMOUNT;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTOPUP_AMOUNTTracker = false;

        /**
         * field for CALL_PLAN
         */
        protected java.lang.String localCALL_PLAN;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCALL_PLANTracker = false;

        /**
         * field for TIME_BAND
         */
        protected java.lang.String localTIME_BAND;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTIME_BANDTracker = false;

        /**
         * field for WINDOW_START_END_TIME
         */
        protected java.lang.String localWINDOW_START_END_TIME;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWINDOW_START_END_TIMETracker = false;

        /**
         * field for EMAIL_ID
         */
        protected java.lang.String localEMAIL_ID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEMAIL_IDTracker = false;

        /**
         * field for ELIGIBLE_USAGE_SET
         */
        protected java.lang.String localELIGIBLE_USAGE_SET;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localELIGIBLE_USAGE_SETTracker = false;

        /**
         * field for REMAINING_CONTRACT_PERIOD
         */
        protected java.lang.String localREMAINING_CONTRACT_PERIOD;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localREMAINING_CONTRACT_PERIODTracker = false;

        /**
         * field for AUTORENEWAL_FLAG
         */
        protected java.lang.String localAUTORENEWAL_FLAG;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAUTORENEWAL_FLAGTracker = false;

        /**
         * field for BONUS_SUB_TYPE
         */
        protected java.lang.String localBONUS_SUB_TYPE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBONUS_SUB_TYPETracker = false;

        /**
         * field for NETWORK_PACKAGE
         */
        protected java.lang.String localNETWORK_PACKAGE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNETWORK_PACKAGETracker = false;

        /**
         * field for REGISTRATION_KEY
         */
        protected java.lang.String localREGISTRATION_KEY;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localREGISTRATION_KEYTracker = false;

        /**
         * field for PRODUCT_DESCRIPTION
         */
        protected java.lang.String localPRODUCT_DESCRIPTION;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPRODUCT_DESCRIPTIONTracker = false;

        /**
         * field for PCRF_END_DATE
         */
        protected java.lang.String localPCRF_END_DATE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPCRF_END_DATETracker = false;

        /**
         * field for PCRF_REMAINING_AMOUNT
         */
        protected java.lang.String localPCRF_REMAINING_AMOUNT;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPCRF_REMAINING_AMOUNTTracker = false;

        public boolean isBONUS_TYPESpecified() {
            return localBONUS_TYPETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBONUS_TYPE() {
            return localBONUS_TYPE;
        }

        /**
         * Auto generated setter method
         * @param param BONUS_TYPE
         */
        public void setBONUS_TYPE(java.lang.String param) {
            localBONUS_TYPETracker = param != null;

            this.localBONUS_TYPE = param;
        }

        public boolean isBONUS_NAMESpecified() {
            return localBONUS_NAMETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBONUS_NAME() {
            return localBONUS_NAME;
        }

        /**
         * Auto generated setter method
         * @param param BONUS_NAME
         */
        public void setBONUS_NAME(java.lang.String param) {
            localBONUS_NAMETracker = param != null;

            this.localBONUS_NAME = param;
        }

        public boolean isSTART_DATESpecified() {
            return localSTART_DATETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSTART_DATE() {
            return localSTART_DATE;
        }

        /**
         * Auto generated setter method
         * @param param START_DATE
         */
        public void setSTART_DATE(java.lang.String param) {
            localSTART_DATETracker = param != null;

            this.localSTART_DATE = param;
        }

        public boolean isEND_DATESpecified() {
            return localEND_DATETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEND_DATE() {
            return localEND_DATE;
        }

        /**
         * Auto generated setter method
         * @param param END_DATE
         */
        public void setEND_DATE(java.lang.String param) {
            localEND_DATETracker = param != null;

            this.localEND_DATE = param;
        }

        public boolean isBONUS_STATUSSpecified() {
            return localBONUS_STATUSTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBONUS_STATUS() {
            return localBONUS_STATUS;
        }

        /**
         * Auto generated setter method
         * @param param BONUS_STATUS
         */
        public void setBONUS_STATUS(java.lang.String param) {
            localBONUS_STATUSTracker = param != null;

            this.localBONUS_STATUS = param;
        }

        public boolean isALLOCATED_AMOUNTSpecified() {
            return localALLOCATED_AMOUNTTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getALLOCATED_AMOUNT() {
            return localALLOCATED_AMOUNT;
        }

        /**
         * Auto generated setter method
         * @param param ALLOCATED_AMOUNT
         */
        public void setALLOCATED_AMOUNT(java.lang.String param) {
            localALLOCATED_AMOUNTTracker = param != null;

            this.localALLOCATED_AMOUNT = param;
        }

        public boolean isCONSUMED_AMOUNTSpecified() {
            return localCONSUMED_AMOUNTTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCONSUMED_AMOUNT() {
            return localCONSUMED_AMOUNT;
        }

        /**
         * Auto generated setter method
         * @param param CONSUMED_AMOUNT
         */
        public void setCONSUMED_AMOUNT(java.lang.String param) {
            localCONSUMED_AMOUNTTracker = param != null;

            this.localCONSUMED_AMOUNT = param;
        }

        public boolean isREMAINING_AMOUNTSpecified() {
            return localREMAINING_AMOUNTTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getREMAINING_AMOUNT() {
            return localREMAINING_AMOUNT;
        }

        /**
         * Auto generated setter method
         * @param param REMAINING_AMOUNT
         */
        public void setREMAINING_AMOUNT(java.lang.String param) {
            localREMAINING_AMOUNTTracker = param != null;

            this.localREMAINING_AMOUNT = param;
        }

        public boolean isBONUS_UOMSpecified() {
            return localBONUS_UOMTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBONUS_UOM() {
            return localBONUS_UOM;
        }

        /**
         * Auto generated setter method
         * @param param BONUS_UOM
         */
        public void setBONUS_UOM(java.lang.String param) {
            localBONUS_UOMTracker = param != null;

            this.localBONUS_UOM = param;
        }

        public boolean isELIGIBILITY_COUNTERSpecified() {
            return localELIGIBILITY_COUNTERTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getELIGIBILITY_COUNTER() {
            return localELIGIBILITY_COUNTER;
        }

        /**
         * Auto generated setter method
         * @param param ELIGIBILITY_COUNTER
         */
        public void setELIGIBILITY_COUNTER(java.lang.String param) {
            localELIGIBILITY_COUNTERTracker = param != null;

            this.localELIGIBILITY_COUNTER = param;
        }

        public boolean isQUALIFYING_UNITSSpecified() {
            return localQUALIFYING_UNITSTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQUALIFYING_UNITS() {
            return localQUALIFYING_UNITS;
        }

        /**
         * Auto generated setter method
         * @param param QUALIFYING_UNITS
         */
        public void setQUALIFYING_UNITS(java.lang.String param) {
            localQUALIFYING_UNITSTracker = param != null;

            this.localQUALIFYING_UNITS = param;
        }

        public boolean isQUALIFYING_UOMSpecified() {
            return localQUALIFYING_UOMTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQUALIFYING_UOM() {
            return localQUALIFYING_UOM;
        }

        /**
         * Auto generated setter method
         * @param param QUALIFYING_UOM
         */
        public void setQUALIFYING_UOM(java.lang.String param) {
            localQUALIFYING_UOMTracker = param != null;

            this.localQUALIFYING_UOM = param;
        }

        public boolean isQUALIFYING_USAGE_SETSpecified() {
            return localQUALIFYING_USAGE_SETTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQUALIFYING_USAGE_SET() {
            return localQUALIFYING_USAGE_SET;
        }

        /**
         * Auto generated setter method
         * @param param QUALIFYING_USAGE_SET
         */
        public void setQUALIFYING_USAGE_SET(java.lang.String param) {
            localQUALIFYING_USAGE_SETTracker = param != null;

            this.localQUALIFYING_USAGE_SET = param;
        }

        public boolean isPERIODIC_FEE_DEDUCTION_STATUSSpecified() {
            return localPERIODIC_FEE_DEDUCTION_STATUSTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPERIODIC_FEE_DEDUCTION_STATUS() {
            return localPERIODIC_FEE_DEDUCTION_STATUS;
        }

        /**
         * Auto generated setter method
         * @param param PERIODIC_FEE_DEDUCTION_STATUS
         */
        public void setPERIODIC_FEE_DEDUCTION_STATUS(java.lang.String param) {
            localPERIODIC_FEE_DEDUCTION_STATUSTracker = param != null;

            this.localPERIODIC_FEE_DEDUCTION_STATUS = param;
        }

        public boolean isREGISTRATION_STATUSSpecified() {
            return localREGISTRATION_STATUSTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getREGISTRATION_STATUS() {
            return localREGISTRATION_STATUS;
        }

        /**
         * Auto generated setter method
         * @param param REGISTRATION_STATUS
         */
        public void setREGISTRATION_STATUS(java.lang.String param) {
            localREGISTRATION_STATUSTracker = param != null;

            this.localREGISTRATION_STATUS = param;
        }

        public boolean isREGISTRATION_STATUS_DATESpecified() {
            return localREGISTRATION_STATUS_DATETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getREGISTRATION_STATUS_DATE() {
            return localREGISTRATION_STATUS_DATE;
        }

        /**
         * Auto generated setter method
         * @param param REGISTRATION_STATUS_DATE
         */
        public void setREGISTRATION_STATUS_DATE(java.lang.String param) {
            localREGISTRATION_STATUS_DATETracker = param != null;

            this.localREGISTRATION_STATUS_DATE = param;
        }

        public boolean isTOPUP_POINTSSpecified() {
            return localTOPUP_POINTSTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTOPUP_POINTS() {
            return localTOPUP_POINTS;
        }

        /**
         * Auto generated setter method
         * @param param TOPUP_POINTS
         */
        public void setTOPUP_POINTS(java.lang.String param) {
            localTOPUP_POINTSTracker = param != null;

            this.localTOPUP_POINTS = param;
        }

        public boolean isTOPUP_AMOUNTSpecified() {
            return localTOPUP_AMOUNTTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTOPUP_AMOUNT() {
            return localTOPUP_AMOUNT;
        }

        /**
         * Auto generated setter method
         * @param param TOPUP_AMOUNT
         */
        public void setTOPUP_AMOUNT(java.lang.String param) {
            localTOPUP_AMOUNTTracker = param != null;

            this.localTOPUP_AMOUNT = param;
        }

        public boolean isCALL_PLANSpecified() {
            return localCALL_PLANTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCALL_PLAN() {
            return localCALL_PLAN;
        }

        /**
         * Auto generated setter method
         * @param param CALL_PLAN
         */
        public void setCALL_PLAN(java.lang.String param) {
            localCALL_PLANTracker = param != null;

            this.localCALL_PLAN = param;
        }

        public boolean isTIME_BANDSpecified() {
            return localTIME_BANDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTIME_BAND() {
            return localTIME_BAND;
        }

        /**
         * Auto generated setter method
         * @param param TIME_BAND
         */
        public void setTIME_BAND(java.lang.String param) {
            localTIME_BANDTracker = param != null;

            this.localTIME_BAND = param;
        }

        public boolean isWINDOW_START_END_TIMESpecified() {
            return localWINDOW_START_END_TIMETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getWINDOW_START_END_TIME() {
            return localWINDOW_START_END_TIME;
        }

        /**
         * Auto generated setter method
         * @param param WINDOW_START_END_TIME
         */
        public void setWINDOW_START_END_TIME(java.lang.String param) {
            localWINDOW_START_END_TIMETracker = param != null;

            this.localWINDOW_START_END_TIME = param;
        }

        public boolean isEMAIL_IDSpecified() {
            return localEMAIL_IDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEMAIL_ID() {
            return localEMAIL_ID;
        }

        /**
         * Auto generated setter method
         * @param param EMAIL_ID
         */
        public void setEMAIL_ID(java.lang.String param) {
            localEMAIL_IDTracker = param != null;

            this.localEMAIL_ID = param;
        }

        public boolean isELIGIBLE_USAGE_SETSpecified() {
            return localELIGIBLE_USAGE_SETTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getELIGIBLE_USAGE_SET() {
            return localELIGIBLE_USAGE_SET;
        }

        /**
         * Auto generated setter method
         * @param param ELIGIBLE_USAGE_SET
         */
        public void setELIGIBLE_USAGE_SET(java.lang.String param) {
            localELIGIBLE_USAGE_SETTracker = param != null;

            this.localELIGIBLE_USAGE_SET = param;
        }

        public boolean isREMAINING_CONTRACT_PERIODSpecified() {
            return localREMAINING_CONTRACT_PERIODTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getREMAINING_CONTRACT_PERIOD() {
            return localREMAINING_CONTRACT_PERIOD;
        }

        /**
         * Auto generated setter method
         * @param param REMAINING_CONTRACT_PERIOD
         */
        public void setREMAINING_CONTRACT_PERIOD(java.lang.String param) {
            localREMAINING_CONTRACT_PERIODTracker = param != null;

            this.localREMAINING_CONTRACT_PERIOD = param;
        }

        public boolean isAUTORENEWAL_FLAGSpecified() {
            return localAUTORENEWAL_FLAGTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAUTORENEWAL_FLAG() {
            return localAUTORENEWAL_FLAG;
        }

        /**
         * Auto generated setter method
         * @param param AUTORENEWAL_FLAG
         */
        public void setAUTORENEWAL_FLAG(java.lang.String param) {
            localAUTORENEWAL_FLAGTracker = param != null;

            this.localAUTORENEWAL_FLAG = param;
        }

        public boolean isBONUS_SUB_TYPESpecified() {
            return localBONUS_SUB_TYPETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBONUS_SUB_TYPE() {
            return localBONUS_SUB_TYPE;
        }

        /**
         * Auto generated setter method
         * @param param BONUS_SUB_TYPE
         */
        public void setBONUS_SUB_TYPE(java.lang.String param) {
            localBONUS_SUB_TYPETracker = param != null;

            this.localBONUS_SUB_TYPE = param;
        }

        public boolean isNETWORK_PACKAGESpecified() {
            return localNETWORK_PACKAGETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getNETWORK_PACKAGE() {
            return localNETWORK_PACKAGE;
        }

        /**
         * Auto generated setter method
         * @param param NETWORK_PACKAGE
         */
        public void setNETWORK_PACKAGE(java.lang.String param) {
            localNETWORK_PACKAGETracker = param != null;

            this.localNETWORK_PACKAGE = param;
        }

        public boolean isREGISTRATION_KEYSpecified() {
            return localREGISTRATION_KEYTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getREGISTRATION_KEY() {
            return localREGISTRATION_KEY;
        }

        /**
         * Auto generated setter method
         * @param param REGISTRATION_KEY
         */
        public void setREGISTRATION_KEY(java.lang.String param) {
            localREGISTRATION_KEYTracker = param != null;

            this.localREGISTRATION_KEY = param;
        }

        public boolean isPRODUCT_DESCRIPTIONSpecified() {
            return localPRODUCT_DESCRIPTIONTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPRODUCT_DESCRIPTION() {
            return localPRODUCT_DESCRIPTION;
        }

        /**
         * Auto generated setter method
         * @param param PRODUCT_DESCRIPTION
         */
        public void setPRODUCT_DESCRIPTION(java.lang.String param) {
            localPRODUCT_DESCRIPTIONTracker = param != null;

            this.localPRODUCT_DESCRIPTION = param;
        }

        public boolean isPCRF_END_DATESpecified() {
            return localPCRF_END_DATETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPCRF_END_DATE() {
            return localPCRF_END_DATE;
        }

        /**
         * Auto generated setter method
         * @param param PCRF_END_DATE
         */
        public void setPCRF_END_DATE(java.lang.String param) {
            localPCRF_END_DATETracker = param != null;

            this.localPCRF_END_DATE = param;
        }

        public boolean isPCRF_REMAINING_AMOUNTSpecified() {
            return localPCRF_REMAINING_AMOUNTTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPCRF_REMAINING_AMOUNT() {
            return localPCRF_REMAINING_AMOUNT;
        }

        /**
         * Auto generated setter method
         * @param param PCRF_REMAINING_AMOUNT
         */
        public void setPCRF_REMAINING_AMOUNT(java.lang.String param) {
            localPCRF_REMAINING_AMOUNTTracker = param != null;

            this.localPCRF_REMAINING_AMOUNT = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":BONUS_ITEM_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "BONUS_ITEM_type0", xmlWriter);
                }
            }

            if (localBONUS_TYPETracker) {
                namespace = "";
                writeStartElement(null, namespace, "BONUS_TYPE", xmlWriter);

                if (localBONUS_TYPE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BONUS_TYPE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBONUS_TYPE);
                }

                xmlWriter.writeEndElement();
            }

            if (localBONUS_NAMETracker) {
                namespace = "";
                writeStartElement(null, namespace, "BONUS_NAME", xmlWriter);

                if (localBONUS_NAME == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BONUS_NAME cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBONUS_NAME);
                }

                xmlWriter.writeEndElement();
            }

            if (localSTART_DATETracker) {
                namespace = "";
                writeStartElement(null, namespace, "START_DATE", xmlWriter);

                if (localSTART_DATE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "START_DATE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSTART_DATE);
                }

                xmlWriter.writeEndElement();
            }

            if (localEND_DATETracker) {
                namespace = "";
                writeStartElement(null, namespace, "END_DATE", xmlWriter);

                if (localEND_DATE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "END_DATE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEND_DATE);
                }

                xmlWriter.writeEndElement();
            }

            if (localBONUS_STATUSTracker) {
                namespace = "";
                writeStartElement(null, namespace, "BONUS_STATUS", xmlWriter);

                if (localBONUS_STATUS == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BONUS_STATUS cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBONUS_STATUS);
                }

                xmlWriter.writeEndElement();
            }

            if (localALLOCATED_AMOUNTTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ALLOCATED_AMOUNT", xmlWriter);

                if (localALLOCATED_AMOUNT == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ALLOCATED_AMOUNT cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localALLOCATED_AMOUNT);
                }

                xmlWriter.writeEndElement();
            }

            if (localCONSUMED_AMOUNTTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CONSUMED_AMOUNT", xmlWriter);

                if (localCONSUMED_AMOUNT == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CONSUMED_AMOUNT cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCONSUMED_AMOUNT);
                }

                xmlWriter.writeEndElement();
            }

            if (localREMAINING_AMOUNTTracker) {
                namespace = "";
                writeStartElement(null, namespace, "REMAINING_AMOUNT", xmlWriter);

                if (localREMAINING_AMOUNT == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "REMAINING_AMOUNT cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localREMAINING_AMOUNT);
                }

                xmlWriter.writeEndElement();
            }

            if (localBONUS_UOMTracker) {
                namespace = "";
                writeStartElement(null, namespace, "BONUS_UOM", xmlWriter);

                if (localBONUS_UOM == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BONUS_UOM cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBONUS_UOM);
                }

                xmlWriter.writeEndElement();
            }

            if (localELIGIBILITY_COUNTERTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ELIGIBILITY_COUNTER",
                    xmlWriter);

                if (localELIGIBILITY_COUNTER == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ELIGIBILITY_COUNTER cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localELIGIBILITY_COUNTER);
                }

                xmlWriter.writeEndElement();
            }

            if (localQUALIFYING_UNITSTracker) {
                namespace = "";
                writeStartElement(null, namespace, "QUALIFYING_UNITS", xmlWriter);

                if (localQUALIFYING_UNITS == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "QUALIFYING_UNITS cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localQUALIFYING_UNITS);
                }

                xmlWriter.writeEndElement();
            }

            if (localQUALIFYING_UOMTracker) {
                namespace = "";
                writeStartElement(null, namespace, "QUALIFYING_UOM", xmlWriter);

                if (localQUALIFYING_UOM == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "QUALIFYING_UOM cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localQUALIFYING_UOM);
                }

                xmlWriter.writeEndElement();
            }

            if (localQUALIFYING_USAGE_SETTracker) {
                namespace = "";
                writeStartElement(null, namespace, "QUALIFYING_USAGE_SET",
                    xmlWriter);

                if (localQUALIFYING_USAGE_SET == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "QUALIFYING_USAGE_SET cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localQUALIFYING_USAGE_SET);
                }

                xmlWriter.writeEndElement();
            }

            if (localPERIODIC_FEE_DEDUCTION_STATUSTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "PERIODIC_FEE_DEDUCTION_STATUS", xmlWriter);

                if (localPERIODIC_FEE_DEDUCTION_STATUS == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PERIODIC_FEE_DEDUCTION_STATUS cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPERIODIC_FEE_DEDUCTION_STATUS);
                }

                xmlWriter.writeEndElement();
            }

            if (localREGISTRATION_STATUSTracker) {
                namespace = "";
                writeStartElement(null, namespace, "REGISTRATION_STATUS",
                    xmlWriter);

                if (localREGISTRATION_STATUS == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "REGISTRATION_STATUS cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localREGISTRATION_STATUS);
                }

                xmlWriter.writeEndElement();
            }

            if (localREGISTRATION_STATUS_DATETracker) {
                namespace = "";
                writeStartElement(null, namespace, "REGISTRATION_STATUS_DATE",
                    xmlWriter);

                if (localREGISTRATION_STATUS_DATE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "REGISTRATION_STATUS_DATE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localREGISTRATION_STATUS_DATE);
                }

                xmlWriter.writeEndElement();
            }

            if (localTOPUP_POINTSTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TOPUP_POINTS", xmlWriter);

                if (localTOPUP_POINTS == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TOPUP_POINTS cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTOPUP_POINTS);
                }

                xmlWriter.writeEndElement();
            }

            if (localTOPUP_AMOUNTTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TOPUP_AMOUNT", xmlWriter);

                if (localTOPUP_AMOUNT == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TOPUP_AMOUNT cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTOPUP_AMOUNT);
                }

                xmlWriter.writeEndElement();
            }

            if (localCALL_PLANTracker) {
                namespace = "";
                writeStartElement(null, namespace, "CALL_PLAN", xmlWriter);

                if (localCALL_PLAN == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CALL_PLAN cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCALL_PLAN);
                }

                xmlWriter.writeEndElement();
            }

            if (localTIME_BANDTracker) {
                namespace = "";
                writeStartElement(null, namespace, "TIME_BAND", xmlWriter);

                if (localTIME_BAND == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TIME_BAND cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTIME_BAND);
                }

                xmlWriter.writeEndElement();
            }

            if (localWINDOW_START_END_TIMETracker) {
                namespace = "";
                writeStartElement(null, namespace, "WINDOW_START_END_TIME",
                    xmlWriter);

                if (localWINDOW_START_END_TIME == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "WINDOW_START_END_TIME cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localWINDOW_START_END_TIME);
                }

                xmlWriter.writeEndElement();
            }

            if (localEMAIL_IDTracker) {
                namespace = "";
                writeStartElement(null, namespace, "EMAIL_ID", xmlWriter);

                if (localEMAIL_ID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "EMAIL_ID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEMAIL_ID);
                }

                xmlWriter.writeEndElement();
            }

            if (localELIGIBLE_USAGE_SETTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ELIGIBLE_USAGE_SET",
                    xmlWriter);

                if (localELIGIBLE_USAGE_SET == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ELIGIBLE_USAGE_SET cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localELIGIBLE_USAGE_SET);
                }

                xmlWriter.writeEndElement();
            }

            if (localREMAINING_CONTRACT_PERIODTracker) {
                namespace = "";
                writeStartElement(null, namespace, "REMAINING_CONTRACT_PERIOD",
                    xmlWriter);

                if (localREMAINING_CONTRACT_PERIOD == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "REMAINING_CONTRACT_PERIOD cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localREMAINING_CONTRACT_PERIOD);
                }

                xmlWriter.writeEndElement();
            }

            if (localAUTORENEWAL_FLAGTracker) {
                namespace = "";
                writeStartElement(null, namespace, "AUTORENEWAL_FLAG", xmlWriter);

                if (localAUTORENEWAL_FLAG == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AUTORENEWAL_FLAG cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAUTORENEWAL_FLAG);
                }

                xmlWriter.writeEndElement();
            }

            if (localBONUS_SUB_TYPETracker) {
                namespace = "";
                writeStartElement(null, namespace, "BONUS_SUB_TYPE", xmlWriter);

                if (localBONUS_SUB_TYPE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BONUS_SUB_TYPE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBONUS_SUB_TYPE);
                }

                xmlWriter.writeEndElement();
            }

            if (localNETWORK_PACKAGETracker) {
                namespace = "";
                writeStartElement(null, namespace, "NETWORK_PACKAGE", xmlWriter);

                if (localNETWORK_PACKAGE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "NETWORK_PACKAGE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localNETWORK_PACKAGE);
                }

                xmlWriter.writeEndElement();
            }

            if (localREGISTRATION_KEYTracker) {
                namespace = "";
                writeStartElement(null, namespace, "REGISTRATION_KEY", xmlWriter);

                if (localREGISTRATION_KEY == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "REGISTRATION_KEY cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localREGISTRATION_KEY);
                }

                xmlWriter.writeEndElement();
            }

            if (localPRODUCT_DESCRIPTIONTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PRODUCT_DESCRIPTION",
                    xmlWriter);

                if (localPRODUCT_DESCRIPTION == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PRODUCT_DESCRIPTION cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPRODUCT_DESCRIPTION);
                }

                xmlWriter.writeEndElement();
            }

            if (localPCRF_END_DATETracker) {
                namespace = "";
                writeStartElement(null, namespace, "PCRF_END_DATE", xmlWriter);

                if (localPCRF_END_DATE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PCRF_END_DATE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPCRF_END_DATE);
                }

                xmlWriter.writeEndElement();
            }

            if (localPCRF_REMAINING_AMOUNTTracker) {
                namespace = "";
                writeStartElement(null, namespace, "PCRF_REMAINING_AMOUNT",
                    xmlWriter);

                if (localPCRF_REMAINING_AMOUNT == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PCRF_REMAINING_AMOUNT cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPCRF_REMAINING_AMOUNT);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BONUS_ITEM_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BONUS_ITEM_type0 object = new BONUS_ITEM_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"BONUS_ITEM_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BONUS_ITEM_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BONUS_TYPE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BONUS_TYPE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBONUS_TYPE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BONUS_NAME").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BONUS_NAME" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBONUS_NAME(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "START_DATE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "START_DATE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSTART_DATE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "END_DATE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "END_DATE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEND_DATE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BONUS_STATUS").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BONUS_STATUS" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBONUS_STATUS(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ALLOCATED_AMOUNT").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ALLOCATED_AMOUNT" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setALLOCATED_AMOUNT(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CONSUMED_AMOUNT").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CONSUMED_AMOUNT" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCONSUMED_AMOUNT(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "REMAINING_AMOUNT").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "REMAINING_AMOUNT" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setREMAINING_AMOUNT(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BONUS_UOM").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BONUS_UOM" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBONUS_UOM(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ELIGIBILITY_COUNTER").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ELIGIBILITY_COUNTER" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setELIGIBILITY_COUNTER(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "QUALIFYING_UNITS").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "QUALIFYING_UNITS" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setQUALIFYING_UNITS(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "QUALIFYING_UOM").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "QUALIFYING_UOM" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setQUALIFYING_UOM(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "QUALIFYING_USAGE_SET").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "QUALIFYING_USAGE_SET" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setQUALIFYING_USAGE_SET(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PERIODIC_FEE_DEDUCTION_STATUS").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "PERIODIC_FEE_DEDUCTION_STATUS" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPERIODIC_FEE_DEDUCTION_STATUS(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "REGISTRATION_STATUS").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "REGISTRATION_STATUS" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setREGISTRATION_STATUS(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "REGISTRATION_STATUS_DATE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "REGISTRATION_STATUS_DATE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setREGISTRATION_STATUS_DATE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TOPUP_POINTS").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TOPUP_POINTS" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTOPUP_POINTS(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TOPUP_AMOUNT").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TOPUP_AMOUNT" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTOPUP_AMOUNT(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "CALL_PLAN").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CALL_PLAN" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCALL_PLAN(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "TIME_BAND").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TIME_BAND" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTIME_BAND(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "WINDOW_START_END_TIME").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "WINDOW_START_END_TIME" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWINDOW_START_END_TIME(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "EMAIL_ID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "EMAIL_ID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEMAIL_ID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ELIGIBLE_USAGE_SET").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ELIGIBLE_USAGE_SET" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setELIGIBLE_USAGE_SET(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "REMAINING_CONTRACT_PERIOD").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "REMAINING_CONTRACT_PERIOD" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setREMAINING_CONTRACT_PERIOD(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "AUTORENEWAL_FLAG").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AUTORENEWAL_FLAG" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAUTORENEWAL_FLAG(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BONUS_SUB_TYPE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BONUS_SUB_TYPE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBONUS_SUB_TYPE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "NETWORK_PACKAGE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "NETWORK_PACKAGE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNETWORK_PACKAGE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "REGISTRATION_KEY").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "REGISTRATION_KEY" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setREGISTRATION_KEY(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PRODUCT_DESCRIPTION").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PRODUCT_DESCRIPTION" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPRODUCT_DESCRIPTION(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "PCRF_END_DATE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PCRF_END_DATE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPCRF_END_DATE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "PCRF_REMAINING_AMOUNT").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PCRF_REMAINING_AMOUNT" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPCRF_REMAINING_AMOUNT(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Attribute_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Attribute_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for AttribDtl
         */
        protected AttribDtl_type0 localAttribDtl;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttribDtlTracker = false;

        public boolean isAttribDtlSpecified() {
            return localAttribDtlTracker;
        }

        /**
         * Auto generated getter method
         * @return AttribDtl_type0
         */
        public AttribDtl_type0 getAttribDtl() {
            return localAttribDtl;
        }

        /**
         * Auto generated setter method
         * @param param AttribDtl
         */
        public void setAttribDtl(AttribDtl_type0 param) {
            localAttribDtlTracker = param != null;

            this.localAttribDtl = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Attribute_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Attribute_type0", xmlWriter);
                }
            }

            if (localAttribDtlTracker) {
                if (localAttribDtl == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "AttribDtl cannot be null!!");
                }

                localAttribDtl.serialize(new javax.xml.namespace.QName("",
                        "AttribDtl"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Attribute_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Attribute_type0 object = new Attribute_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Attribute_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Attribute_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "AttribDtl").equals(
                                reader.getName())) {
                        object.setAttribDtl(AttribDtl_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DuePaymentInfoDetails_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = DuePaymentInfoDetails_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for Account_number
         */
        protected java.lang.String localAccount_number;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAccount_numberTracker = false;

        /**
         * field for Msisdn
         */
        protected java.lang.String localMsisdn;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMsisdnTracker = false;

        /**
         * field for Last_bill_cylce_outstanding_amt
         */
        protected java.lang.String localLast_bill_cylce_outstanding_amt;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLast_bill_cylce_outstanding_amtTracker = false;

        /**
         * field for Total_outstanding_amt
         */
        protected java.lang.String localTotal_outstanding_amt;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotal_outstanding_amtTracker = false;

        /**
         * field for Account_Type
         */
        protected java.lang.String localAccount_Type;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAccount_TypeTracker = false;

        /**
         * field for OverPaymentAmount
         */
        protected java.lang.String localOverPaymentAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOverPaymentAmountTracker = false;

        /**
         * field for Payment_Type
         */
        protected java.lang.String localPayment_Type;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPayment_TypeTracker = false;

        /**
         * field for Ebill_Mail_Id
         */
        protected java.lang.String localEbill_Mail_Id;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEbill_Mail_IdTracker = false;

        public boolean isAccount_numberSpecified() {
            return localAccount_numberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAccount_number() {
            return localAccount_number;
        }

        /**
         * Auto generated setter method
         * @param param Account_number
         */
        public void setAccount_number(java.lang.String param) {
            localAccount_numberTracker = param != null;

            this.localAccount_number = param;
        }

        public boolean isMsisdnSpecified() {
            return localMsisdnTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMsisdn() {
            return localMsisdn;
        }

        /**
         * Auto generated setter method
         * @param param Msisdn
         */
        public void setMsisdn(java.lang.String param) {
            localMsisdnTracker = param != null;

            this.localMsisdn = param;
        }

        public boolean isLast_bill_cylce_outstanding_amtSpecified() {
            return localLast_bill_cylce_outstanding_amtTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLast_bill_cylce_outstanding_amt() {
            return localLast_bill_cylce_outstanding_amt;
        }

        /**
         * Auto generated setter method
         * @param param Last_bill_cylce_outstanding_amt
         */
        public void setLast_bill_cylce_outstanding_amt(java.lang.String param) {
            localLast_bill_cylce_outstanding_amtTracker = param != null;

            this.localLast_bill_cylce_outstanding_amt = param;
        }

        public boolean isTotal_outstanding_amtSpecified() {
            return localTotal_outstanding_amtTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTotal_outstanding_amt() {
            return localTotal_outstanding_amt;
        }

        /**
         * Auto generated setter method
         * @param param Total_outstanding_amt
         */
        public void setTotal_outstanding_amt(java.lang.String param) {
            localTotal_outstanding_amtTracker = param != null;

            this.localTotal_outstanding_amt = param;
        }

        public boolean isAccount_TypeSpecified() {
            return localAccount_TypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAccount_Type() {
            return localAccount_Type;
        }

        /**
         * Auto generated setter method
         * @param param Account_Type
         */
        public void setAccount_Type(java.lang.String param) {
            localAccount_TypeTracker = param != null;

            this.localAccount_Type = param;
        }

        public boolean isOverPaymentAmountSpecified() {
            return localOverPaymentAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOverPaymentAmount() {
            return localOverPaymentAmount;
        }

        /**
         * Auto generated setter method
         * @param param OverPaymentAmount
         */
        public void setOverPaymentAmount(java.lang.String param) {
            localOverPaymentAmountTracker = param != null;

            this.localOverPaymentAmount = param;
        }

        public boolean isPayment_TypeSpecified() {
            return localPayment_TypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPayment_Type() {
            return localPayment_Type;
        }

        /**
         * Auto generated setter method
         * @param param Payment_Type
         */
        public void setPayment_Type(java.lang.String param) {
            localPayment_TypeTracker = param != null;

            this.localPayment_Type = param;
        }

        public boolean isEbill_Mail_IdSpecified() {
            return localEbill_Mail_IdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEbill_Mail_Id() {
            return localEbill_Mail_Id;
        }

        /**
         * Auto generated setter method
         * @param param Ebill_Mail_Id
         */
        public void setEbill_Mail_Id(java.lang.String param) {
            localEbill_Mail_IdTracker = param != null;

            this.localEbill_Mail_Id = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DuePaymentInfoDetails_type0",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DuePaymentInfoDetails_type0", xmlWriter);
                }
            }

            if (localAccount_numberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Account_number", xmlWriter);

                if (localAccount_number == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Account_number cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAccount_number);
                }

                xmlWriter.writeEndElement();
            }

            if (localMsisdnTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Msisdn", xmlWriter);

                if (localMsisdn == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Msisdn cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMsisdn);
                }

                xmlWriter.writeEndElement();
            }

            if (localLast_bill_cylce_outstanding_amtTracker) {
                namespace = "";
                writeStartElement(null, namespace,
                    "Last_bill_cylce_outstanding_amt", xmlWriter);

                if (localLast_bill_cylce_outstanding_amt == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Last_bill_cylce_outstanding_amt cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localLast_bill_cylce_outstanding_amt);
                }

                xmlWriter.writeEndElement();
            }

            if (localTotal_outstanding_amtTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Total_outstanding_amt",
                    xmlWriter);

                if (localTotal_outstanding_amt == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Total_outstanding_amt cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTotal_outstanding_amt);
                }

                xmlWriter.writeEndElement();
            }

            if (localAccount_TypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Account_Type", xmlWriter);

                if (localAccount_Type == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Account_Type cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAccount_Type);
                }

                xmlWriter.writeEndElement();
            }

            if (localOverPaymentAmountTracker) {
                namespace = "";
                writeStartElement(null, namespace, "OverPaymentAmount",
                    xmlWriter);

                if (localOverPaymentAmount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "OverPaymentAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOverPaymentAmount);
                }

                xmlWriter.writeEndElement();
            }

            if (localPayment_TypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Payment_Type", xmlWriter);

                if (localPayment_Type == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Payment_Type cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPayment_Type);
                }

                xmlWriter.writeEndElement();
            }

            if (localEbill_Mail_IdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "Ebill_Mail_Id", xmlWriter);

                if (localEbill_Mail_Id == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Ebill_Mail_Id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEbill_Mail_Id);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DuePaymentInfoDetails_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DuePaymentInfoDetails_type0 object = new DuePaymentInfoDetails_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DuePaymentInfoDetails_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DuePaymentInfoDetails_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Account_number").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Account_number" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAccount_number(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Msisdn").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Msisdn" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMsisdn(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "Last_bill_cylce_outstanding_amt").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "Last_bill_cylce_outstanding_amt" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLast_bill_cylce_outstanding_amt(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "Total_outstanding_amt").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Total_outstanding_amt" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotal_outstanding_amt(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Account_Type").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Account_Type" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAccount_Type(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "OverPaymentAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "OverPaymentAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOverPaymentAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Payment_Type").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Payment_Type" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPayment_Type(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "Ebill_Mail_Id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Ebill_Mail_Id" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEbill_Mail_Id(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SQBonusInfo_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = SQBonusInfo_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd
           Namespace Prefix = ns1
         */

        /**
         * field for ResponseCode
         */
        protected java.lang.String localResponseCode;

        /**
         * field for ResponseDescription
         */
        protected java.lang.String localResponseDescription;

        /**
         * field for BONUS_INFO
         */
        protected BONUS_INFO_type1 localBONUS_INFO;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getResponseCode() {
            return localResponseCode;
        }

        /**
         * Auto generated setter method
         * @param param ResponseCode
         */
        public void setResponseCode(java.lang.String param) {
            this.localResponseCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getResponseDescription() {
            return localResponseDescription;
        }

        /**
         * Auto generated setter method
         * @param param ResponseDescription
         */
        public void setResponseDescription(java.lang.String param) {
            this.localResponseDescription = param;
        }

        /**
         * Auto generated getter method
         * @return BONUS_INFO_type1
         */
        public BONUS_INFO_type1 getBONUS_INFO() {
            return localBONUS_INFO;
        }

        /**
         * Auto generated setter method
         * @param param BONUS_INFO
         */
        public void setBONUS_INFO(BONUS_INFO_type1 param) {
            this.localBONUS_INFO = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":SQBonusInfo_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "SQBonusInfo_type0", xmlWriter);
                }
            }

            namespace = "";
            writeStartElement(null, namespace, "ResponseCode", xmlWriter);

            if (localResponseCode == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "ResponseCode cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localResponseCode);
            }

            xmlWriter.writeEndElement();

            namespace = "";
            writeStartElement(null, namespace, "ResponseDescription", xmlWriter);

            if (localResponseDescription == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "ResponseDescription cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localResponseDescription);
            }

            xmlWriter.writeEndElement();

            if (localBONUS_INFO == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "BONUS_INFO cannot be null!!");
            }

            localBONUS_INFO.serialize(new javax.xml.namespace.QName("",
                    "BONUS_INFO"), xmlWriter);

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_PROJECT_01042014/Shared_Resources/Schema/XML/ODP/TibcoODPMessage.xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SQBonusInfo_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SQBonusInfo_type0 object = new SQBonusInfo_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"SQBonusInfo_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (SQBonusInfo_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ResponseCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ResponseCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setResponseCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ResponseDescription").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ResponseDescription" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setResponseDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "BONUS_INFO").equals(
                                reader.getName())) {
                        object.setBONUS_INFO(BONUS_INFO_type1.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }
}
