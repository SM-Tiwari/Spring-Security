package id.gnvsolution.d3.api.component.transid;


import org.hibernate.SessionFactory;
import org.hibernate.dialect.Dialect;
import org.hibernate.dialect.Oracle10gDialect;
import org.hibernate.dialect.Oracle9iDialect;
import org.hibernate.jdbc.ReturningWork;
import org.hibernate.service.jdbc.dialect.internal.StandardDialectResolver;
import org.hibernate.service.jdbc.dialect.spi.DialectResolver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.springframework.beans.factory.annotation.Value;

/**
 * Created by Arie
 * on 10/04/2017.
 */
@Component("transactionSeqGenerator")
@Transactional(propagation = Propagation.REQUIRES_NEW)
public class TransactionSeqGenerator implements SequenceGenerator {
    @Autowired
    @Qualifier("sessionFactory_Def")
    private SessionFactory sessionFactory;
    
    @Override
    public Long getNextValue() {
        ReturningWork<Long> maxReturningWork = connection -> {
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;

            try {
                String seqName = "transaction_sequence";
                preparedStatement = connection.prepareStatement("SELECT " + seqName + ".nextval FROM DUAL");
                resultSet = preparedStatement.executeQuery();
                resultSet.next();
                return resultSet.getLong(1) % 10000;
            } finally {
                if(preparedStatement != null) {
                    preparedStatement.close();
                }
                if(resultSet != null) {
                    resultSet.close();
                }
            }

        };
        return sessionFactory.getCurrentSession().doReturningWork(maxReturningWork);
    }

}
