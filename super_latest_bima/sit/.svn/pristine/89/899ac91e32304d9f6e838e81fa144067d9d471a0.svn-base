package com.gnv.h3i.bima3.imagecaching.controller;

import com.gnv.h3i.bima3.imagecaching.bean.CacheDto;
import com.gnv.h3i.bima3.imagecaching.service.ImageService;
import com.gnv.h3i.bima3.imagecaching.service.ReloadService;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletResponse;
import net.sf.ehcache.CacheManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * <pre>
 *  com.gnv.h3i.bima3.imagecaching.controller.ImageController 
 * </pre>
 *
 * @author edwin < edwinkun at gmail dot com >
 * Jun 13, 2017 12:53:41 PM
 *
 */
@Controller
public class ImageController {

    private static final Logger LOGGER = Logger.getLogger(ImageController.class);
    
    @Autowired
    private ImageService imageService;
    
    @Autowired
    private ReloadService reloadService;
    
    @Autowired
    private CacheManager cacheManager;
    
    @RequestMapping(value = "/", method = RequestMethod.GET)
    public @ResponseBody Map index(ModelMap modelMap){
        Map map = new HashMap();
        map.put("status", "1");
        return map;
    }

    @RequestMapping(value = "/{imagename:.*}", method = RequestMethod.GET)
    public ResponseEntity<byte[]>  getImage(ModelMap modelMap, @PathVariable String imagename, HttpServletResponse response) throws Exception{
        
        imagename = imagename.replace("\\", "");
        imagename = imagename.replace("/", "");
        
        final HttpHeaders headers = new HttpHeaders();
        headers.add("Cache-Control", "max-age=86400");
        if(imagename.toLowerCase().endsWith("jpg") || imagename.toLowerCase().endsWith("jpeg")) {
            headers.setContentType(org.springframework.http.MediaType.IMAGE_JPEG);
        }
        else if(imagename.toLowerCase().endsWith("png")) {
            headers.setContentType(org.springframework.http.MediaType.IMAGE_PNG);
        }
        else if(imagename.toLowerCase().endsWith("gif")) {
            headers.setContentType(org.springframework.http.MediaType.IMAGE_GIF);
        }
        else {
            headers.add("Accept-Ranges", "bytes");
            headers.add("Connection", "keep-alive");
            return new ResponseEntity<>(imageService.getVideo(imagename), headers, HttpStatus.OK);
        }
        try {
            return new ResponseEntity<>(imageService.getImage(imagename), headers, HttpStatus.OK);
        } catch (Exception e) {
            response.sendError(404);
            return null;
        }
    }

    @RequestMapping(value = "/reload", method = RequestMethod.GET)
    public @ResponseBody Map  reload() {
        reloadService.reloadAllImages();
        return new HashMap();
    }

    @RequestMapping(value = "/reload1hour", method = RequestMethod.GET)
    public @ResponseBody Map  reload1Hour() {
        reloadService.reloadLastOneHourImage();
        return new HashMap();
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    public @ResponseBody Map  count() {
        Map map = new HashMap();
        for(String cacheName : cacheManager.getCacheNames()) {
            List<Map> maps = new ArrayList<>();
            for (Object key : cacheManager.getCache(cacheName).getKeys()) {
                Map cacheMap = new HashMap();
                cacheMap.put(key, new CacheDto(cacheManager.getCache(cacheName).get(key).getSerializedSize(), cacheManager.getCache(cacheName).get(key).getHitCount()));
                maps.add(cacheMap);
            }
            map.put(cacheName, maps);
        }
        return map;
    }
}
