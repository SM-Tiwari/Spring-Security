package id.gnvsolution.d3.api.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.gnv.vnm.selfcare.core.model.ServiceResult;
import com.gnv.vnm.selfcare.core.model.ServiceResult.StatusCode;

import id.gnvsolution.d3.api.dto.request.MicRequestDto;
import id.gnvsolution.d3.api.security.securityutil.JWTConstant;
import id.gnvsolution.d3.api.security.securityutil.TokenDetails;
import id.gnvsolution.d3.api.security.securityutil.TokenExtractor;
import id.gnvsolution.d3.api.service.MicService;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
@RequestMapping("/api/v1/mic")
public class MicInformationController extends BaseController{
	
	
	 public static final Logger LOGGER = LoggerFactory.getLogger(MicInformationController.class);
	@Autowired
	private TokenExtractor tokenExtractor;
	
	@Autowired
	MicService micservice;
	
	

	@RequestMapping(value = "/micupdate", method = RequestMethod.POST)
    public Object MICStatusandURL(@RequestBody MicRequestDto micRequestDto,@RequestHeader(value=JWTConstant.JWT_HEADER_NAME, required = false) String authToken){
    
		System.out.println("Inside MicInformationController in extractTables method::::::::::::" + micRequestDto.getMsisdn());
		LOGGER.info("Inside MicInformationController in extractTables method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			if (tokenDetails != null ) {
				
				return new ServiceResult(StatusCode.SUCCESS, micservice.getMICStatusandURL(micRequestDto.getMsisdn()), "Success");
			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside MicInformationController in extractTables method :::::: " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside MicInformationController in extractTables method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside MicInformationController in extractTables method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}
		
		
		
       // return micservice.getMICStatusandURL(micRequestDto.getMsisdn());
		
    }
}
