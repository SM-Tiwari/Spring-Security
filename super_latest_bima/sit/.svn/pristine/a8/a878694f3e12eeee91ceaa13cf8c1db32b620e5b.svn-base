package id.gnvsolution.d3.api.controller;


import id.gnvsolution.d3.api.dto.request.BillingHistoryDto;
import id.gnvsolution.d3.api.security.securityutil.JWTConstant;
import id.gnvsolution.d3.api.security.securityutil.TokenDetails;
import id.gnvsolution.d3.api.security.securityutil.TokenExtractor;
import id.gnvsolution.d3.api.service.PostPaidPaymentHistoryService;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.gnv.vnm.selfcare.core.model.ServiceResult;
import com.gnv.vnm.selfcare.core.model.ServiceResult.StatusCode;


@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
@RequestMapping("/api/v1/postpaid")
public class PostPaidPaymentHistoryController extends BaseController{   
   
	 public static final Logger LOGGER = LoggerFactory.getLogger(PostPaidPaymentHistoryController.class);
		@Autowired
		private TokenExtractor tokenExtractor;
	
	@Autowired
	PostPaidPaymentHistoryService postPaidPaymentHistoryService;
	    
    @RequestMapping(value = "/billhistory", method = RequestMethod.POST)
    public Object extractTables(@RequestBody BillingHistoryDto billingHistoryDto,@RequestHeader(value=JWTConstant.JWT_HEADER_NAME, required = false) String authToken) {   	
    	LOGGER.info("Inside PostPaidPaymentHistoryController in extractTables method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			if (tokenDetails != null ) {
				String msisdn = tokenDetails.getMsisdn();
				System.out.println("token is "+tokenDetails.getMsisdn()); 
				billingHistoryDto.setMsisdn(msisdn);
				return new ServiceResult(StatusCode.SUCCESS, postPaidPaymentHistoryService.HistoryDetails(billingHistoryDto), "Success");
			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside PostPaidPaymentHistoryController in extractTables method :::::: " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside PostPaidPaymentHistoryController in extractTables method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside PostPaidPaymentHistoryController in extractTables method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}  	    	
    }
    
    
    @RequestMapping(value = "/billhistorymail", method = RequestMethod.POST)
    public Object billhistorymail(@RequestBody BillingHistoryDto billingHistoryDto,
    		@RequestHeader(value=JWTConstant.JWT_HEADER_NAME, required = false) String authToken) {   	
    	LOGGER.info("Inside PostPaidPaymentHistoryController in billhistorymail method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			if (tokenDetails != null ) {
				
				return new ServiceResult(StatusCode.SUCCESS,postPaidPaymentHistoryService.sendMail(billingHistoryDto), "Success");
			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside PostPaidPaymentHistoryController in billhistorymail method :::::: " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside PostPaidPaymentHistoryController in billhistorymail method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside PostPaidPaymentHistoryController in billhistorymail method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}  
    //	return postPaidPaymentHistoryService.sendMail(billingHistoryDto);
		  	    	
    }
}
