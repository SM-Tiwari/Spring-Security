/**
 * UpdateQueryDetailsStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.7.4  Built on : Oct 21, 2016 (10:47:34 BST)
 */
package id.gnvsolution.d3.api.wsdl;

import id.gnvsolution.d3.api.wsdl.*;


/*
 *  UpdateQueryDetailsStub java implementation
 */
public class UpdateQueryDetailsStub extends org.apache.axis2.client.Stub {
    private static int counter = 0;
    protected org.apache.axis2.description.AxisOperation[] _operations;

    //hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();
    private javax.xml.namespace.QName[] opNameArray = null;

    /**
     *Constructor that takes in a configContext
     */
    public UpdateQueryDetailsStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(configurationContext, targetEndpoint, false);
    }

    /**
     * Constructor that takes in a configContext  and useseperate listner
     */
    public UpdateQueryDetailsStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
        //To populate AxisService
        populateAxisService();
        populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,
                _service);

        _serviceClient.getOptions()
                      .setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
    }

    /**
     * Default Constructor
     */
    public UpdateQueryDetailsStub(
        org.apache.axis2.context.ConfigurationContext configurationContext)
        throws org.apache.axis2.AxisFault {
        this(configurationContext, "http://TIBCO_URL_EMAIL_ENDPOINT");
    }

    /**
     * Default Constructor
     */
    public UpdateQueryDetailsStub() throws org.apache.axis2.AxisFault {
        this("http://TIBCO_URL_EMAIL_ENDPOINT");
    }

    /**
     * Constructor taking the target endpoint
     */
    public UpdateQueryDetailsStub(java.lang.String targetEndpoint)
        throws org.apache.axis2.AxisFault {
        this(null, targetEndpoint);
    }

    private static synchronized java.lang.String getUniqueSuffix() {
        // reset the counter if it is greater than 99999
        if (counter > 99999) {
            counter = 0;
        }

        counter = counter + 1;

        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) +
        "_" + counter;
    }

    private void populateAxisService() throws org.apache.axis2.AxisFault {
        //creating the Service with a unique name
        _service = new org.apache.axis2.description.AxisService(
                "UpdateQueryDetails" + getUniqueSuffix());
        addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[4];

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://xmlns.example.com/1384165396127",
                "displayInvoiceDetails"));
        _service.addOperation(__operation);

        _operations[0] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://xmlns.example.com/1384165396127",
                "displayInvoiceUsageDetails"));
        _service.addOperation(__operation);

        _operations[1] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://xmlns.example.com/1384165396127", "emailRegUpdate"));
        _service.addOperation(__operation);

        _operations[2] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://xmlns.example.com/1384165396127",
                "paymentHistoryDetails"));
        _service.addOperation(__operation);

        _operations[3] = __operation;
    }

    //populates the faults
    private void populateFaults() {
    }

    /**
     * Auto generated method signature
     *
     * @see id.gnvsolution.d3.api.wsdl.UpdateQueryDetails#displayInvoiceDetails
     * @param displayInvoiceRequest0
     */
    public id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceResponse displayInvoiceDetails(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceRequest displayInvoiceRequest0)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
            _operationClient.getOptions()
                            .setAction("/Business_Process/HYBRID/UpdateQueryDetails.serviceagent/UpdateQueryHybridDetailsEndpoint1/DisplayInvoiceDetails");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    displayInvoiceRequest0,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://xmlns.example.com/1384165396127",
                            "displayInvoiceDetails")),
                    new javax.xml.namespace.QName(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                        "DisplayInvoiceRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceResponse.class);

            return (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "DisplayInvoiceDetails"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "DisplayInvoiceDetails"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "DisplayInvoiceDetails"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see id.gnvsolution.d3.api.wsdl.UpdateQueryDetails#startdisplayInvoiceDetails
     * @param displayInvoiceRequest0
     */
    public void startdisplayInvoiceDetails(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceRequest displayInvoiceRequest0,
        final id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
        _operationClient.getOptions()
                        .setAction("/Business_Process/HYBRID/UpdateQueryDetails.serviceagent/UpdateQueryHybridDetailsEndpoint1/DisplayInvoiceDetails");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                displayInvoiceRequest0,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://xmlns.example.com/1384165396127",
                        "displayInvoiceDetails")),
                new javax.xml.namespace.QName(
                    "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                    "DisplayInvoiceRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceResponse.class);
                        callback.receiveResultdisplayInvoiceDetails((id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrordisplayInvoiceDetails(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "DisplayInvoiceDetails"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "DisplayInvoiceDetails"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "DisplayInvoiceDetails"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrordisplayInvoiceDetails(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceDetails(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceDetails(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceDetails(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceDetails(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceDetails(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceDetails(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceDetails(f);
                                }
                            } else {
                                callback.receiveErrordisplayInvoiceDetails(f);
                            }
                        } else {
                            callback.receiveErrordisplayInvoiceDetails(f);
                        }
                    } else {
                        callback.receiveErrordisplayInvoiceDetails(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrordisplayInvoiceDetails(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[0].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[0].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see id.gnvsolution.d3.api.wsdl.UpdateQueryDetails#displayInvoiceUsageDetails
     * @param invoiceUsageDetailsRequest2
     */
    public id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsResponse displayInvoiceUsageDetails(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsRequest invoiceUsageDetailsRequest2)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
            _operationClient.getOptions()
                            .setAction("/Business_Process/HYBRID/UpdateQueryDetails.serviceagent/UpdateQueryHybridDetailsEndpoint1/DisplayInvoiceUsageDetails");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    invoiceUsageDetailsRequest2,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://xmlns.example.com/1384165396127",
                            "displayInvoiceUsageDetails")),
                    new javax.xml.namespace.QName(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                        "InvoiceUsageDetailsRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsResponse.class);

            return (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "DisplayInvoiceUsageDetails"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "DisplayInvoiceUsageDetails"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "DisplayInvoiceUsageDetails"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see id.gnvsolution.d3.api.wsdl.UpdateQueryDetails#startdisplayInvoiceUsageDetails
     * @param invoiceUsageDetailsRequest2
     */
    public void startdisplayInvoiceUsageDetails(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsRequest invoiceUsageDetailsRequest2,
        final id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
        _operationClient.getOptions()
                        .setAction("/Business_Process/HYBRID/UpdateQueryDetails.serviceagent/UpdateQueryHybridDetailsEndpoint1/DisplayInvoiceUsageDetails");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                invoiceUsageDetailsRequest2,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://xmlns.example.com/1384165396127",
                        "displayInvoiceUsageDetails")),
                new javax.xml.namespace.QName(
                    "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                    "InvoiceUsageDetailsRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsResponse.class);
                        callback.receiveResultdisplayInvoiceUsageDetails((id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrordisplayInvoiceUsageDetails(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "DisplayInvoiceUsageDetails"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "DisplayInvoiceUsageDetails"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "DisplayInvoiceUsageDetails"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrordisplayInvoiceUsageDetails(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceUsageDetails(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceUsageDetails(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceUsageDetails(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceUsageDetails(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceUsageDetails(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceUsageDetails(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordisplayInvoiceUsageDetails(f);
                                }
                            } else {
                                callback.receiveErrordisplayInvoiceUsageDetails(f);
                            }
                        } else {
                            callback.receiveErrordisplayInvoiceUsageDetails(f);
                        }
                    } else {
                        callback.receiveErrordisplayInvoiceUsageDetails(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrordisplayInvoiceUsageDetails(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[1].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[1].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see id.gnvsolution.d3.api.wsdl.UpdateQueryDetails#emailRegUpdate
     * @param emailRegUpdateRequest4
     */
    public id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateResponse emailRegUpdate(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateRequest emailRegUpdateRequest4)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
            _operationClient.getOptions()
                            .setAction("/Business_Process/HYBRID/UpdateQueryDetails.serviceagent/UpdateQueryHybridDetailsEndpoint1/EmailRegUpdate");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    emailRegUpdateRequest4,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://xmlns.example.com/1384165396127",
                            "emailRegUpdate")),
                    new javax.xml.namespace.QName(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                        "EmailRegUpdateRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateResponse.class);

            return (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "EmailRegUpdate"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "EmailRegUpdate"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "EmailRegUpdate"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see id.gnvsolution.d3.api.wsdl.UpdateQueryDetails#startemailRegUpdate
     * @param emailRegUpdateRequest4
     */
    public void startemailRegUpdate(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateRequest emailRegUpdateRequest4,
        final id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
        _operationClient.getOptions()
                        .setAction("/Business_Process/HYBRID/UpdateQueryDetails.serviceagent/UpdateQueryHybridDetailsEndpoint1/EmailRegUpdate");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                emailRegUpdateRequest4,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://xmlns.example.com/1384165396127",
                        "emailRegUpdate")),
                new javax.xml.namespace.QName(
                    "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                    "EmailRegUpdateRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateResponse.class);
                        callback.receiveResultemailRegUpdate((id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErroremailRegUpdate(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "EmailRegUpdate"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "EmailRegUpdate"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "EmailRegUpdate"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErroremailRegUpdate(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroremailRegUpdate(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroremailRegUpdate(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroremailRegUpdate(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroremailRegUpdate(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroremailRegUpdate(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroremailRegUpdate(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroremailRegUpdate(f);
                                }
                            } else {
                                callback.receiveErroremailRegUpdate(f);
                            }
                        } else {
                            callback.receiveErroremailRegUpdate(f);
                        }
                    } else {
                        callback.receiveErroremailRegUpdate(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErroremailRegUpdate(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[2].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[2].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see id.gnvsolution.d3.api.wsdl.UpdateQueryDetails#paymentHistoryDetails
     * @param paymentHistoryDetailsRequest6
     */
    public id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsResponse paymentHistoryDetails(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsRequest paymentHistoryDetailsRequest6)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
            _operationClient.getOptions()
                            .setAction("/Business_Process/HYBRID/UpdateQueryDetails.serviceagent/UpdateQueryHybridDetailsEndpoint1/PaymentHistoryDetails");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    paymentHistoryDetailsRequest6,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://xmlns.example.com/1384165396127",
                            "paymentHistoryDetails")),
                    new javax.xml.namespace.QName(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                        "PaymentHistoryDetailsRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsResponse.class);

            return (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "PaymentHistoryDetails"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "PaymentHistoryDetails"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "PaymentHistoryDetails"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see id.gnvsolution.d3.api.wsdl.UpdateQueryDetails#startpaymentHistoryDetails
     * @param paymentHistoryDetailsRequest6
     */
    public void startpaymentHistoryDetails(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsRequest paymentHistoryDetailsRequest6,
        final id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
        _operationClient.getOptions()
                        .setAction("/Business_Process/HYBRID/UpdateQueryDetails.serviceagent/UpdateQueryHybridDetailsEndpoint1/PaymentHistoryDetails");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                paymentHistoryDetailsRequest6,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://xmlns.example.com/1384165396127",
                        "paymentHistoryDetails")),
                new javax.xml.namespace.QName(
                    "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                    "PaymentHistoryDetailsRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsResponse.class);
                        callback.receiveResultpaymentHistoryDetails((id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorpaymentHistoryDetails(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "PaymentHistoryDetails"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "PaymentHistoryDetails"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "PaymentHistoryDetails"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorpaymentHistoryDetails(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorpaymentHistoryDetails(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorpaymentHistoryDetails(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorpaymentHistoryDetails(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorpaymentHistoryDetails(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorpaymentHistoryDetails(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorpaymentHistoryDetails(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorpaymentHistoryDetails(f);
                                }
                            } else {
                                callback.receiveErrorpaymentHistoryDetails(f);
                            }
                        } else {
                            callback.receiveErrorpaymentHistoryDetails(f);
                        }
                    } else {
                        callback.receiveErrorpaymentHistoryDetails(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorpaymentHistoryDetails(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[3].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[3].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        if (opNameArray == null) {
            return false;
        }

        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }

        return false;
    }

    private org.apache.axiom.om.OMElement toOM(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */

    /**
     *  get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory) {
        return factory.getDefaultEnvelope();
    }

    private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
        java.lang.Class type) throws org.apache.axis2.AxisFault {
        try {
            if (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceRequest.class.equals(
                        type)) {
                return id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceResponse.class.equals(
                        type)) {
                return id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.DisplayInvoiceResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateRequest.class.equals(
                        type)) {
                return id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateResponse.class.equals(
                        type)) {
                return id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.EmailRegUpdateResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsRequest.class.equals(
                        type)) {
                return id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsResponse.class.equals(
                        type)) {
                return id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.InvoiceUsageDetailsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsRequest.class.equals(
                        type)) {
                return id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsResponse.class.equals(
                        type)) {
                return id.gnvsolution.d3.api.wsdl.UpdateQueryDetailsStub.PaymentHistoryDetailsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

        return null;
    }

    //http://TIBCO_URL_EMAIL_ENDPOINT
    public static class DisplayInvoiceRequest implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                "DisplayInvoiceRequest", "ns15");

        /**
         * field for TransactionID
         */
        protected java.lang.String localTransactionID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTransactionIDTracker = false;

        /**
         * field for MSISDN
         */
        protected java.lang.String localMSISDN;

        /**
         * field for RequestType
         */
        protected java.lang.String localRequestType;

        /**
         * field for InvoiceID
         */
        protected java.lang.String localInvoiceID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInvoiceIDTracker = false;

        /**
         * field for Source
         */
        protected java.lang.String localSource;

        public boolean isTransactionIDSpecified() {
            return localTransactionIDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTransactionID() {
            return localTransactionID;
        }

        /**
         * Auto generated setter method
         * @param param TransactionID
         */
        public void setTransactionID(java.lang.String param) {
            localTransactionIDTracker = param != null;

            this.localTransactionID = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMSISDN() {
            return localMSISDN;
        }

        /**
         * Auto generated setter method
         * @param param MSISDN
         */
        public void setMSISDN(java.lang.String param) {
            this.localMSISDN = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRequestType() {
            return localRequestType;
        }

        /**
         * Auto generated setter method
         * @param param RequestType
         */
        public void setRequestType(java.lang.String param) {
            this.localRequestType = param;
        }

        public boolean isInvoiceIDSpecified() {
            return localInvoiceIDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getInvoiceID() {
            return localInvoiceID;
        }

        /**
         * Auto generated setter method
         * @param param InvoiceID
         */
        public void setInvoiceID(java.lang.String param) {
            localInvoiceIDTracker = param != null;

            this.localInvoiceID = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSource() {
            return localSource;
        }

        /**
         * Auto generated setter method
         * @param param Source
         */
        public void setSource(java.lang.String param) {
            this.localSource = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DisplayInvoiceRequest", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DisplayInvoiceRequest", xmlWriter);
                }
            }

            if (localTransactionIDTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
                writeStartElement(null, namespace, "TransactionID", xmlWriter);

                if (localTransactionID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TransactionID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTransactionID);
                }

                xmlWriter.writeEndElement();
            }

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
            writeStartElement(null, namespace, "MSISDN", xmlWriter);

            if (localMSISDN == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "MSISDN cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localMSISDN);
            }

            xmlWriter.writeEndElement();

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
            writeStartElement(null, namespace, "RequestType", xmlWriter);

            if (localRequestType == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "RequestType cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localRequestType);
            }

            xmlWriter.writeEndElement();

            if (localInvoiceIDTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
                writeStartElement(null, namespace, "InvoiceID", xmlWriter);

                if (localInvoiceID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "InvoiceID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localInvoiceID);
                }

                xmlWriter.writeEndElement();
            }

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
            writeStartElement(null, namespace, "Source", xmlWriter);

            if (localSource == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "Source cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localSource);
            }

            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd")) {
                return "ns15";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DisplayInvoiceRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DisplayInvoiceRequest object = new DisplayInvoiceRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DisplayInvoiceRequest".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DisplayInvoiceRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "TransactionID").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "TransactionID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TransactionID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTransactionID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "MSISDN").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "MSISDN").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MSISDN" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMSISDN(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "RequestType").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "RequestType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "RequestType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRequestType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "InvoiceID").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "InvoiceID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "InvoiceID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInvoiceID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "Source").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Source").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Source" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSource(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class InvoiceUsageDetailsResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                "InvoiceUsageDetailsResponse", "ns16");

        /**
         * field for StatusCode
         */
        protected java.lang.String localStatusCode;

        /**
         * field for StatusText
         */
        protected java.lang.String localStatusText;

        /**
         * field for INvoice_ID
         */
        protected java.lang.String localINvoice_ID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localINvoice_IDTracker = false;

        /**
         * field for Invoice_Month
         */
        protected java.lang.String localInvoice_Month;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInvoice_MonthTracker = false;

        /**
         * field for Outstanding_Amount
         */
        protected java.lang.String localOutstanding_Amount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOutstanding_AmountTracker = false;

        /**
         * field for Invoice_Status
         */
        protected java.lang.String localInvoice_Status;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInvoice_StatusTracker = false;

        /**
         * field for Amount_Paid
         */
        protected java.lang.String localAmount_Paid;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAmount_PaidTracker = false;

        /**
         * field for CURRENT_DUE
         */
        protected java.lang.String localCURRENT_DUE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCURRENT_DUETracker = false;

        /**
         * field for PREVIOUS_DUE
         */
        protected java.lang.String localPREVIOUS_DUE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPREVIOUS_DUETracker = false;

        /**
         * field for InvoiceUsageDetails
         * This was an Array!
         */
        protected InvoiceUsageDetails_type0[] localInvoiceUsageDetails;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInvoiceUsageDetailsTracker = false;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusCode() {
            return localStatusCode;
        }

        /**
         * Auto generated setter method
         * @param param StatusCode
         */
        public void setStatusCode(java.lang.String param) {
            this.localStatusCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusText() {
            return localStatusText;
        }

        /**
         * Auto generated setter method
         * @param param StatusText
         */
        public void setStatusText(java.lang.String param) {
            this.localStatusText = param;
        }

        public boolean isINvoice_IDSpecified() {
            return localINvoice_IDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getINvoice_ID() {
            return localINvoice_ID;
        }

        /**
         * Auto generated setter method
         * @param param INvoice_ID
         */
        public void setINvoice_ID(java.lang.String param) {
            localINvoice_IDTracker = param != null;

            this.localINvoice_ID = param;
        }

        public boolean isInvoice_MonthSpecified() {
            return localInvoice_MonthTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getInvoice_Month() {
            return localInvoice_Month;
        }

        /**
         * Auto generated setter method
         * @param param Invoice_Month
         */
        public void setInvoice_Month(java.lang.String param) {
            localInvoice_MonthTracker = param != null;

            this.localInvoice_Month = param;
        }

        public boolean isOutstanding_AmountSpecified() {
            return localOutstanding_AmountTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOutstanding_Amount() {
            return localOutstanding_Amount;
        }

        /**
         * Auto generated setter method
         * @param param Outstanding_Amount
         */
        public void setOutstanding_Amount(java.lang.String param) {
            localOutstanding_AmountTracker = param != null;

            this.localOutstanding_Amount = param;
        }

        public boolean isInvoice_StatusSpecified() {
            return localInvoice_StatusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getInvoice_Status() {
            return localInvoice_Status;
        }

        /**
         * Auto generated setter method
         * @param param Invoice_Status
         */
        public void setInvoice_Status(java.lang.String param) {
            localInvoice_StatusTracker = param != null;

            this.localInvoice_Status = param;
        }

        public boolean isAmount_PaidSpecified() {
            return localAmount_PaidTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAmount_Paid() {
            return localAmount_Paid;
        }

        /**
         * Auto generated setter method
         * @param param Amount_Paid
         */
        public void setAmount_Paid(java.lang.String param) {
            localAmount_PaidTracker = param != null;

            this.localAmount_Paid = param;
        }

        public boolean isCURRENT_DUESpecified() {
            return localCURRENT_DUETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCURRENT_DUE() {
            return localCURRENT_DUE;
        }

        /**
         * Auto generated setter method
         * @param param CURRENT_DUE
         */
        public void setCURRENT_DUE(java.lang.String param) {
            localCURRENT_DUETracker = param != null;

            this.localCURRENT_DUE = param;
        }

        public boolean isPREVIOUS_DUESpecified() {
            return localPREVIOUS_DUETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPREVIOUS_DUE() {
            return localPREVIOUS_DUE;
        }

        /**
         * Auto generated setter method
         * @param param PREVIOUS_DUE
         */
        public void setPREVIOUS_DUE(java.lang.String param) {
            localPREVIOUS_DUETracker = param != null;

            this.localPREVIOUS_DUE = param;
        }

        public boolean isInvoiceUsageDetailsSpecified() {
            return localInvoiceUsageDetailsTracker;
        }

        /**
         * Auto generated getter method
         * @return InvoiceUsageDetails_type0[]
         */
        public InvoiceUsageDetails_type0[] getInvoiceUsageDetails() {
            return localInvoiceUsageDetails;
        }

        /**
         * validate the array for InvoiceUsageDetails
         */
        protected void validateInvoiceUsageDetails(
            InvoiceUsageDetails_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param InvoiceUsageDetails
         */
        public void setInvoiceUsageDetails(InvoiceUsageDetails_type0[] param) {
            validateInvoiceUsageDetails(param);

            localInvoiceUsageDetailsTracker = param != null;

            this.localInvoiceUsageDetails = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param InvoiceUsageDetails_type0
         */
        public void addInvoiceUsageDetails(InvoiceUsageDetails_type0 param) {
            if (localInvoiceUsageDetails == null) {
                localInvoiceUsageDetails = new InvoiceUsageDetails_type0[] {  };
            }

            //update the setting tracker
            localInvoiceUsageDetailsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localInvoiceUsageDetails);
            list.add(param);
            this.localInvoiceUsageDetails = (InvoiceUsageDetails_type0[]) list.toArray(new InvoiceUsageDetails_type0[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":InvoiceUsageDetailsResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "InvoiceUsageDetailsResponse", xmlWriter);
                }
            }

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
            writeStartElement(null, namespace, "StatusCode", xmlWriter);

            if (localStatusCode == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusCode cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatusCode);
            }

            xmlWriter.writeEndElement();

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
            writeStartElement(null, namespace, "StatusText", xmlWriter);

            if (localStatusText == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusText cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatusText);
            }

            xmlWriter.writeEndElement();

            if (localINvoice_IDTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "INvoice_ID", xmlWriter);

                if (localINvoice_ID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "INvoice_ID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localINvoice_ID);
                }

                xmlWriter.writeEndElement();
            }

            if (localInvoice_MonthTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "Invoice_Month", xmlWriter);

                if (localInvoice_Month == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Invoice_Month cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localInvoice_Month);
                }

                xmlWriter.writeEndElement();
            }

            if (localOutstanding_AmountTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "Outstanding_Amount",
                    xmlWriter);

                if (localOutstanding_Amount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Outstanding_Amount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOutstanding_Amount);
                }

                xmlWriter.writeEndElement();
            }

            if (localInvoice_StatusTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "Invoice_Status", xmlWriter);

                if (localInvoice_Status == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Invoice_Status cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localInvoice_Status);
                }

                xmlWriter.writeEndElement();
            }

            if (localAmount_PaidTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "Amount_Paid", xmlWriter);

                if (localAmount_Paid == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Amount_Paid cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAmount_Paid);
                }

                xmlWriter.writeEndElement();
            }

            if (localCURRENT_DUETracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "CURRENT_DUE", xmlWriter);

                if (localCURRENT_DUE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CURRENT_DUE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCURRENT_DUE);
                }

                xmlWriter.writeEndElement();
            }

            if (localPREVIOUS_DUETracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "PREVIOUS_DUE", xmlWriter);

                if (localPREVIOUS_DUE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PREVIOUS_DUE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPREVIOUS_DUE);
                }

                xmlWriter.writeEndElement();
            }

            if (localInvoiceUsageDetailsTracker) {
                if (localInvoiceUsageDetails != null) {
                    for (int i = 0; i < localInvoiceUsageDetails.length; i++) {
                        if (localInvoiceUsageDetails[i] != null) {
                            localInvoiceUsageDetails[i].serialize(new javax.xml.namespace.QName(
                                    "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                    "InvoiceUsageDetails"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "InvoiceUsageDetails cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5")) {
                return "ns16";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static InvoiceUsageDetailsResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                InvoiceUsageDetailsResponse object = new InvoiceUsageDetailsResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"InvoiceUsageDetailsResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (InvoiceUsageDetailsResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list10 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "StatusCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "StatusCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "StatusText").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "StatusText").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusText" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "INvoice_ID").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "INvoice_ID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "INvoice_ID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setINvoice_ID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "Invoice_Month").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Invoice_Month").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Invoice_Month" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInvoice_Month(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "Outstanding_Amount").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "Outstanding_Amount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Outstanding_Amount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOutstanding_Amount(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "Invoice_Status").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Invoice_Status").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Invoice_Status" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInvoice_Status(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "Amount_Paid").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Amount_Paid").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Amount_Paid" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAmount_Paid(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "CURRENT_DUE").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "CURRENT_DUE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CURRENT_DUE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCURRENT_DUE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "PREVIOUS_DUE").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "PREVIOUS_DUE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PREVIOUS_DUE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPREVIOUS_DUE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "InvoiceUsageDetails").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "InvoiceUsageDetails").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        list10.add(InvoiceUsageDetails_type0.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone10 = false;

                        while (!loopDone10) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone10 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                            "InvoiceUsageDetails").equals(
                                            reader.getName())) {
                                    list10.add(InvoiceUsageDetails_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone10 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setInvoiceUsageDetails((InvoiceUsageDetails_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                InvoiceUsageDetails_type0.class, list10));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class InvoiceUsageDetailsRequest implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                "InvoiceUsageDetailsRequest", "ns16");

        /**
         * field for MSISDN
         */
        protected java.lang.String localMSISDN;

        /**
         * field for Invoiceid
         */
        protected java.lang.String localInvoiceid;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInvoiceidTracker = false;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMSISDN() {
            return localMSISDN;
        }

        /**
         * Auto generated setter method
         * @param param MSISDN
         */
        public void setMSISDN(java.lang.String param) {
            this.localMSISDN = param;
        }

        public boolean isInvoiceidSpecified() {
            return localInvoiceidTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getInvoiceid() {
            return localInvoiceid;
        }

        /**
         * Auto generated setter method
         * @param param Invoiceid
         */
        public void setInvoiceid(java.lang.String param) {
            localInvoiceidTracker = param != null;

            this.localInvoiceid = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":InvoiceUsageDetailsRequest",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "InvoiceUsageDetailsRequest", xmlWriter);
                }
            }

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
            writeStartElement(null, namespace, "MSISDN", xmlWriter);

            if (localMSISDN == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "MSISDN cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localMSISDN);
            }

            xmlWriter.writeEndElement();

            if (localInvoiceidTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "Invoiceid", xmlWriter);

                if (localInvoiceid == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Invoiceid cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localInvoiceid);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5")) {
                return "ns16";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static InvoiceUsageDetailsRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                InvoiceUsageDetailsRequest object = new InvoiceUsageDetailsRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"InvoiceUsageDetailsRequest".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (InvoiceUsageDetailsRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "MSISDN").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "MSISDN").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MSISDN" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMSISDN(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "Invoiceid").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Invoiceid").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Invoiceid" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInvoiceid(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ExtensionMapper {
        public static java.lang.Object getTypeObject(
            java.lang.String namespaceURI, java.lang.String typeName,
            javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
            if ("http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5".equals(
                        namespaceURI) &&
                    "PaymentDetails_type0".equals(typeName)) {
                return PaymentDetails_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd".equals(
                        namespaceURI) &&
                    "InvoiceDetails_type0".equals(typeName)) {
                return InvoiceDetails_type0.Factory.parse(reader);
            }

            if ("http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5".equals(
                        namespaceURI) &&
                    "InvoiceUsageDetails_type0".equals(typeName)) {
                return InvoiceUsageDetails_type0.Factory.parse(reader);
            }

            throw new org.apache.axis2.databinding.ADBException(
                "Unsupported type " + namespaceURI + " " + typeName);
        }
    }

    public static class PaymentHistoryDetailsResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                "PaymentHistoryDetailsResponse", "ns14");

        /**
         * field for Status
         */
        protected java.lang.String localStatus;

        /**
         * field for StatusText
         */
        protected java.lang.String localStatusText;

        /**
         * field for PaymentDetails
         * This was an Array!
         */
        protected PaymentDetails_type0[] localPaymentDetails;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPaymentDetailsTracker = false;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(java.lang.String param) {
            this.localStatus = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusText() {
            return localStatusText;
        }

        /**
         * Auto generated setter method
         * @param param StatusText
         */
        public void setStatusText(java.lang.String param) {
            this.localStatusText = param;
        }

        public boolean isPaymentDetailsSpecified() {
            return localPaymentDetailsTracker;
        }

        /**
         * Auto generated getter method
         * @return PaymentDetails_type0[]
         */
        public PaymentDetails_type0[] getPaymentDetails() {
            return localPaymentDetails;
        }

        /**
         * validate the array for PaymentDetails
         */
        protected void validatePaymentDetails(PaymentDetails_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param PaymentDetails
         */
        public void setPaymentDetails(PaymentDetails_type0[] param) {
            validatePaymentDetails(param);

            localPaymentDetailsTracker = param != null;

            this.localPaymentDetails = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param PaymentDetails_type0
         */
        public void addPaymentDetails(PaymentDetails_type0 param) {
            if (localPaymentDetails == null) {
                localPaymentDetails = new PaymentDetails_type0[] {  };
            }

            //update the setting tracker
            localPaymentDetailsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localPaymentDetails);
            list.add(param);
            this.localPaymentDetails = (PaymentDetails_type0[]) list.toArray(new PaymentDetails_type0[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":PaymentHistoryDetailsResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "PaymentHistoryDetailsResponse", xmlWriter);
                }
            }

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
            writeStartElement(null, namespace, "Status", xmlWriter);

            if (localStatus == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "Status cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatus);
            }

            xmlWriter.writeEndElement();

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
            writeStartElement(null, namespace, "StatusText", xmlWriter);

            if (localStatusText == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusText cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatusText);
            }

            xmlWriter.writeEndElement();

            if (localPaymentDetailsTracker) {
                if (localPaymentDetails != null) {
                    for (int i = 0; i < localPaymentDetails.length; i++) {
                        if (localPaymentDetails[i] != null) {
                            localPaymentDetails[i].serialize(new javax.xml.namespace.QName(
                                    "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                    "PaymentDetails"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "PaymentDetails cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5")) {
                return "ns14";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static PaymentHistoryDetailsResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                PaymentHistoryDetailsResponse object = new PaymentHistoryDetailsResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"PaymentHistoryDetailsResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (PaymentHistoryDetailsResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list3 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Status").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Status").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Status" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "StatusText").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "StatusText").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusText" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "PaymentDetails").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "PaymentDetails").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list3.add(PaymentDetails_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone3 = false;

                        while (!loopDone3) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone3 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                            "PaymentDetails").equals(
                                            reader.getName())) {
                                    list3.add(PaymentDetails_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone3 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setPaymentDetails((PaymentDetails_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                PaymentDetails_type0.class, list3));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class PaymentDetails_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = PaymentDetails_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5
           Namespace Prefix = ns14
         */

        /**
         * field for PaymentRefNo
         */
        protected java.lang.String localPaymentRefNo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPaymentRefNoTracker = false;

        /**
         * field for TransDTM
         */
        protected java.lang.String localTransDTM;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTransDTMTracker = false;

        /**
         * field for Amount
         */
        protected java.lang.String localAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAmountTracker = false;

        /**
         * field for Source
         */
        protected java.lang.String localSource;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSourceTracker = false;

        /**
         * field for EAI_KeyID
         */
        protected java.lang.String localEAI_KeyID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEAI_KeyIDTracker = false;

        /**
         * field for Before_Balance
         */
        protected java.lang.String localBefore_Balance;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBefore_BalanceTracker = false;

        /**
         * field for After_Balance
         */
        protected java.lang.String localAfter_Balance;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAfter_BalanceTracker = false;

        /**
         * field for Payment_Status
         */
        protected java.lang.String localPayment_Status;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPayment_StatusTracker = false;

        /**
         * field for Rejected_DTM
         */
        protected java.lang.String localRejected_DTM;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRejected_DTMTracker = false;

        /**
         * field for Rejected_Reason
         */
        protected java.lang.String localRejected_Reason;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRejected_ReasonTracker = false;

        /**
         * field for Rejected_EAIKeyID
         */
        protected java.lang.String localRejected_EAIKeyID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRejected_EAIKeyIDTracker = false;

        /**
         * field for Reatiler_MSISDN
         */
        protected java.lang.String localReatiler_MSISDN;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReatiler_MSISDNTracker = false;

        /**
         * field for FL_ID
         */
        protected java.lang.String localFL_ID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFL_IDTracker = false;

        /**
         * field for Retailer_QRCode
         */
        protected java.lang.String localRetailer_QRCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRetailer_QRCodeTracker = false;

        public boolean isPaymentRefNoSpecified() {
            return localPaymentRefNoTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPaymentRefNo() {
            return localPaymentRefNo;
        }

        /**
         * Auto generated setter method
         * @param param PaymentRefNo
         */
        public void setPaymentRefNo(java.lang.String param) {
            localPaymentRefNoTracker = param != null;

            this.localPaymentRefNo = param;
        }

        public boolean isTransDTMSpecified() {
            return localTransDTMTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTransDTM() {
            return localTransDTM;
        }

        /**
         * Auto generated setter method
         * @param param TransDTM
         */
        public void setTransDTM(java.lang.String param) {
            localTransDTMTracker = param != null;

            this.localTransDTM = param;
        }

        public boolean isAmountSpecified() {
            return localAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAmount() {
            return localAmount;
        }

        /**
         * Auto generated setter method
         * @param param Amount
         */
        public void setAmount(java.lang.String param) {
            localAmountTracker = param != null;

            this.localAmount = param;
        }

        public boolean isSourceSpecified() {
            return localSourceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSource() {
            return localSource;
        }

        /**
         * Auto generated setter method
         * @param param Source
         */
        public void setSource(java.lang.String param) {
            localSourceTracker = param != null;

            this.localSource = param;
        }

        public boolean isEAI_KeyIDSpecified() {
            return localEAI_KeyIDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEAI_KeyID() {
            return localEAI_KeyID;
        }

        /**
         * Auto generated setter method
         * @param param EAI_KeyID
         */
        public void setEAI_KeyID(java.lang.String param) {
            localEAI_KeyIDTracker = param != null;

            this.localEAI_KeyID = param;
        }

        public boolean isBefore_BalanceSpecified() {
            return localBefore_BalanceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBefore_Balance() {
            return localBefore_Balance;
        }

        /**
         * Auto generated setter method
         * @param param Before_Balance
         */
        public void setBefore_Balance(java.lang.String param) {
            localBefore_BalanceTracker = param != null;

            this.localBefore_Balance = param;
        }

        public boolean isAfter_BalanceSpecified() {
            return localAfter_BalanceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAfter_Balance() {
            return localAfter_Balance;
        }

        /**
         * Auto generated setter method
         * @param param After_Balance
         */
        public void setAfter_Balance(java.lang.String param) {
            localAfter_BalanceTracker = param != null;

            this.localAfter_Balance = param;
        }

        public boolean isPayment_StatusSpecified() {
            return localPayment_StatusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPayment_Status() {
            return localPayment_Status;
        }

        /**
         * Auto generated setter method
         * @param param Payment_Status
         */
        public void setPayment_Status(java.lang.String param) {
            localPayment_StatusTracker = param != null;

            this.localPayment_Status = param;
        }

        public boolean isRejected_DTMSpecified() {
            return localRejected_DTMTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRejected_DTM() {
            return localRejected_DTM;
        }

        /**
         * Auto generated setter method
         * @param param Rejected_DTM
         */
        public void setRejected_DTM(java.lang.String param) {
            localRejected_DTMTracker = param != null;

            this.localRejected_DTM = param;
        }

        public boolean isRejected_ReasonSpecified() {
            return localRejected_ReasonTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRejected_Reason() {
            return localRejected_Reason;
        }

        /**
         * Auto generated setter method
         * @param param Rejected_Reason
         */
        public void setRejected_Reason(java.lang.String param) {
            localRejected_ReasonTracker = param != null;

            this.localRejected_Reason = param;
        }

        public boolean isRejected_EAIKeyIDSpecified() {
            return localRejected_EAIKeyIDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRejected_EAIKeyID() {
            return localRejected_EAIKeyID;
        }

        /**
         * Auto generated setter method
         * @param param Rejected_EAIKeyID
         */
        public void setRejected_EAIKeyID(java.lang.String param) {
            localRejected_EAIKeyIDTracker = param != null;

            this.localRejected_EAIKeyID = param;
        }

        public boolean isReatiler_MSISDNSpecified() {
            return localReatiler_MSISDNTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getReatiler_MSISDN() {
            return localReatiler_MSISDN;
        }

        /**
         * Auto generated setter method
         * @param param Reatiler_MSISDN
         */
        public void setReatiler_MSISDN(java.lang.String param) {
            localReatiler_MSISDNTracker = param != null;

            this.localReatiler_MSISDN = param;
        }

        public boolean isFL_IDSpecified() {
            return localFL_IDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFL_ID() {
            return localFL_ID;
        }

        /**
         * Auto generated setter method
         * @param param FL_ID
         */
        public void setFL_ID(java.lang.String param) {
            localFL_IDTracker = param != null;

            this.localFL_ID = param;
        }

        public boolean isRetailer_QRCodeSpecified() {
            return localRetailer_QRCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRetailer_QRCode() {
            return localRetailer_QRCode;
        }

        /**
         * Auto generated setter method
         * @param param Retailer_QRCode
         */
        public void setRetailer_QRCode(java.lang.String param) {
            localRetailer_QRCodeTracker = param != null;

            this.localRetailer_QRCode = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":PaymentDetails_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "PaymentDetails_type0", xmlWriter);
                }
            }

            if (localPaymentRefNoTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "PaymentRefNo", xmlWriter);

                if (localPaymentRefNo == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PaymentRefNo cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPaymentRefNo);
                }

                xmlWriter.writeEndElement();
            }

            if (localTransDTMTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "TransDTM", xmlWriter);

                if (localTransDTM == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "TransDTM cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTransDTM);
                }

                xmlWriter.writeEndElement();
            }

            if (localAmountTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "Amount", xmlWriter);

                if (localAmount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Amount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAmount);
                }

                xmlWriter.writeEndElement();
            }

            if (localSourceTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "Source", xmlWriter);

                if (localSource == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Source cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSource);
                }

                xmlWriter.writeEndElement();
            }

            if (localEAI_KeyIDTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "EAI_KeyID", xmlWriter);

                if (localEAI_KeyID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "EAI_KeyID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEAI_KeyID);
                }

                xmlWriter.writeEndElement();
            }

            if (localBefore_BalanceTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "Before_Balance", xmlWriter);

                if (localBefore_Balance == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Before_Balance cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBefore_Balance);
                }

                xmlWriter.writeEndElement();
            }

            if (localAfter_BalanceTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "After_Balance", xmlWriter);

                if (localAfter_Balance == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "After_Balance cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAfter_Balance);
                }

                xmlWriter.writeEndElement();
            }

            if (localPayment_StatusTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "Payment_Status", xmlWriter);

                if (localPayment_Status == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Payment_Status cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPayment_Status);
                }

                xmlWriter.writeEndElement();
            }

            if (localRejected_DTMTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "Rejected_DTM", xmlWriter);

                if (localRejected_DTM == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Rejected_DTM cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRejected_DTM);
                }

                xmlWriter.writeEndElement();
            }

            if (localRejected_ReasonTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "Rejected_Reason", xmlWriter);

                if (localRejected_Reason == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Rejected_Reason cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRejected_Reason);
                }

                xmlWriter.writeEndElement();
            }

            if (localRejected_EAIKeyIDTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "Rejected_EAIKeyID",
                    xmlWriter);

                if (localRejected_EAIKeyID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Rejected_EAIKeyID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRejected_EAIKeyID);
                }

                xmlWriter.writeEndElement();
            }

            if (localReatiler_MSISDNTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "Reatiler_MSISDN", xmlWriter);

                if (localReatiler_MSISDN == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Reatiler_MSISDN cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localReatiler_MSISDN);
                }

                xmlWriter.writeEndElement();
            }

            if (localFL_IDTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "FL_ID", xmlWriter);

                if (localFL_ID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "FL_ID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFL_ID);
                }

                xmlWriter.writeEndElement();
            }

            if (localRetailer_QRCodeTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
                writeStartElement(null, namespace, "Retailer_QRCode", xmlWriter);

                if (localRetailer_QRCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Retailer_QRCode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localRetailer_QRCode);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5")) {
                return "ns14";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static PaymentDetails_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                PaymentDetails_type0 object = new PaymentDetails_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"PaymentDetails_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (PaymentDetails_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "PaymentRefNo").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "PaymentRefNo").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PaymentRefNo" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPaymentRefNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "TransDTM").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "TransDTM").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TransDTM" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTransDTM(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Amount").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Amount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Amount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Source").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Source").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Source" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSource(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "EAI_KeyID").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "EAI_KeyID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "EAI_KeyID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEAI_KeyID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Before_Balance").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Before_Balance").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Before_Balance" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBefore_Balance(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "After_Balance").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "After_Balance").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "After_Balance" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAfter_Balance(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Payment_Status").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Payment_Status").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Payment_Status" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPayment_Status(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Rejected_DTM").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Rejected_DTM").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Rejected_DTM" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRejected_DTM(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Rejected_Reason").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Rejected_Reason").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Rejected_Reason" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRejected_Reason(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Rejected_EAIKeyID").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "Rejected_EAIKeyID").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Rejected_EAIKeyID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRejected_EAIKeyID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Reatiler_MSISDN").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Reatiler_MSISDN").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Reatiler_MSISDN" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setReatiler_MSISDN(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "FL_ID").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "FL_ID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "FL_ID" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFL_ID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Retailer_QRCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Retailer_QRCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Retailer_QRCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRetailer_QRCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class PaymentHistoryDetailsRequest implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                "PaymentHistoryDetailsRequest", "ns14");

        /**
         * field for Transaction_ID
         */
        protected java.lang.String localTransaction_ID;

        /**
         * field for SUB_MSISDN
         */
        protected java.lang.String localSUB_MSISDN;

        /**
         * field for Source
         */
        protected java.lang.String localSource;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTransaction_ID() {
            return localTransaction_ID;
        }

        /**
         * Auto generated setter method
         * @param param Transaction_ID
         */
        public void setTransaction_ID(java.lang.String param) {
            this.localTransaction_ID = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSUB_MSISDN() {
            return localSUB_MSISDN;
        }

        /**
         * Auto generated setter method
         * @param param SUB_MSISDN
         */
        public void setSUB_MSISDN(java.lang.String param) {
            this.localSUB_MSISDN = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSource() {
            return localSource;
        }

        /**
         * Auto generated setter method
         * @param param Source
         */
        public void setSource(java.lang.String param) {
            this.localSource = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":PaymentHistoryDetailsRequest",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "PaymentHistoryDetailsRequest", xmlWriter);
                }
            }

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
            writeStartElement(null, namespace, "Transaction_ID", xmlWriter);

            if (localTransaction_ID == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "Transaction_ID cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localTransaction_ID);
            }

            xmlWriter.writeEndElement();

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
            writeStartElement(null, namespace, "SUB_MSISDN", xmlWriter);

            if (localSUB_MSISDN == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "SUB_MSISDN cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localSUB_MSISDN);
            }

            xmlWriter.writeEndElement();

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5";
            writeStartElement(null, namespace, "Source", xmlWriter);

            if (localSource == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "Source cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localSource);
            }

            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5")) {
                return "ns14";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static PaymentHistoryDetailsRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                PaymentHistoryDetailsRequest object = new PaymentHistoryDetailsRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"PaymentHistoryDetailsRequest".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (PaymentHistoryDetailsRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Transaction_ID").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Transaction_ID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Transaction_ID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTransaction_ID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "SUB_MSISDN").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "SUB_MSISDN").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SUB_MSISDN" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSUB_MSISDN(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/PaymentHistoryDetails.xsd5",
                                "Source").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Source").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Source" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSource(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class InvoiceDetails_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = InvoiceDetails_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd
           Namespace Prefix = ns15
         */

        /**
         * field for InvoiceMonth
         */
        protected java.lang.String localInvoiceMonth;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInvoiceMonthTracker = false;

        /**
         * field for OutstandingAmount
         */
        protected java.lang.String localOutstandingAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOutstandingAmountTracker = false;

        /**
         * field for AmountPaid
         */
        protected java.lang.String localAmountPaid;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAmountPaidTracker = false;

        /**
         * field for InvoiceStatus
         */
        protected java.lang.String localInvoiceStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInvoiceStatusTracker = false;

        /**
         * field for INVOICE_ID
         */
        protected java.lang.String localINVOICE_ID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localINVOICE_IDTracker = false;

        /**
         * field for CURRENT_DUE
         */
        protected java.lang.String localCURRENT_DUE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCURRENT_DUETracker = false;

        /**
         * field for PREVIOUS_DUE
         */
        protected java.lang.String localPREVIOUS_DUE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPREVIOUS_DUETracker = false;

        public boolean isInvoiceMonthSpecified() {
            return localInvoiceMonthTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getInvoiceMonth() {
            return localInvoiceMonth;
        }

        /**
         * Auto generated setter method
         * @param param InvoiceMonth
         */
        public void setInvoiceMonth(java.lang.String param) {
            localInvoiceMonthTracker = param != null;

            this.localInvoiceMonth = param;
        }

        public boolean isOutstandingAmountSpecified() {
            return localOutstandingAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOutstandingAmount() {
            return localOutstandingAmount;
        }

        /**
         * Auto generated setter method
         * @param param OutstandingAmount
         */
        public void setOutstandingAmount(java.lang.String param) {
            localOutstandingAmountTracker = param != null;

            this.localOutstandingAmount = param;
        }

        public boolean isAmountPaidSpecified() {
            return localAmountPaidTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAmountPaid() {
            return localAmountPaid;
        }

        /**
         * Auto generated setter method
         * @param param AmountPaid
         */
        public void setAmountPaid(java.lang.String param) {
            localAmountPaidTracker = param != null;

            this.localAmountPaid = param;
        }

        public boolean isInvoiceStatusSpecified() {
            return localInvoiceStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getInvoiceStatus() {
            return localInvoiceStatus;
        }

        /**
         * Auto generated setter method
         * @param param InvoiceStatus
         */
        public void setInvoiceStatus(java.lang.String param) {
            localInvoiceStatusTracker = param != null;

            this.localInvoiceStatus = param;
        }

        public boolean isINVOICE_IDSpecified() {
            return localINVOICE_IDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getINVOICE_ID() {
            return localINVOICE_ID;
        }

        /**
         * Auto generated setter method
         * @param param INVOICE_ID
         */
        public void setINVOICE_ID(java.lang.String param) {
            localINVOICE_IDTracker = param != null;

            this.localINVOICE_ID = param;
        }

        public boolean isCURRENT_DUESpecified() {
            return localCURRENT_DUETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCURRENT_DUE() {
            return localCURRENT_DUE;
        }

        /**
         * Auto generated setter method
         * @param param CURRENT_DUE
         */
        public void setCURRENT_DUE(java.lang.String param) {
            localCURRENT_DUETracker = param != null;

            this.localCURRENT_DUE = param;
        }

        public boolean isPREVIOUS_DUESpecified() {
            return localPREVIOUS_DUETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPREVIOUS_DUE() {
            return localPREVIOUS_DUE;
        }

        /**
         * Auto generated setter method
         * @param param PREVIOUS_DUE
         */
        public void setPREVIOUS_DUE(java.lang.String param) {
            localPREVIOUS_DUETracker = param != null;

            this.localPREVIOUS_DUE = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":InvoiceDetails_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "InvoiceDetails_type0", xmlWriter);
                }
            }

            if (localInvoiceMonthTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
                writeStartElement(null, namespace, "InvoiceMonth", xmlWriter);

                if (localInvoiceMonth == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "InvoiceMonth cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localInvoiceMonth);
                }

                xmlWriter.writeEndElement();
            }

            if (localOutstandingAmountTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
                writeStartElement(null, namespace, "OutstandingAmount",
                    xmlWriter);

                if (localOutstandingAmount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "OutstandingAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOutstandingAmount);
                }

                xmlWriter.writeEndElement();
            }

            if (localAmountPaidTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
                writeStartElement(null, namespace, "AmountPaid", xmlWriter);

                if (localAmountPaid == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "AmountPaid cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAmountPaid);
                }

                xmlWriter.writeEndElement();
            }

            if (localInvoiceStatusTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
                writeStartElement(null, namespace, "InvoiceStatus", xmlWriter);

                if (localInvoiceStatus == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "InvoiceStatus cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localInvoiceStatus);
                }

                xmlWriter.writeEndElement();
            }

            if (localINVOICE_IDTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
                writeStartElement(null, namespace, "INVOICE_ID", xmlWriter);

                if (localINVOICE_ID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "INVOICE_ID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localINVOICE_ID);
                }

                xmlWriter.writeEndElement();
            }

            if (localCURRENT_DUETracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
                writeStartElement(null, namespace, "CURRENT_DUE", xmlWriter);

                if (localCURRENT_DUE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "CURRENT_DUE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCURRENT_DUE);
                }

                xmlWriter.writeEndElement();
            }

            if (localPREVIOUS_DUETracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
                writeStartElement(null, namespace, "PREVIOUS_DUE", xmlWriter);

                if (localPREVIOUS_DUE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "PREVIOUS_DUE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPREVIOUS_DUE);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd")) {
                return "ns15";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static InvoiceDetails_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                InvoiceDetails_type0 object = new InvoiceDetails_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"InvoiceDetails_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (InvoiceDetails_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "InvoiceMonth").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "InvoiceMonth").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "InvoiceMonth" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInvoiceMonth(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "OutstandingAmount").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("",
                                "OutstandingAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "OutstandingAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOutstandingAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "AmountPaid").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "AmountPaid").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "AmountPaid" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAmountPaid(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "InvoiceStatus").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "InvoiceStatus").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "InvoiceStatus" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInvoiceStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "INVOICE_ID").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "INVOICE_ID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "INVOICE_ID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setINVOICE_ID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "CURRENT_DUE").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "CURRENT_DUE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "CURRENT_DUE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCURRENT_DUE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "PREVIOUS_DUE").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "PREVIOUS_DUE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "PREVIOUS_DUE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPREVIOUS_DUE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class EmailRegUpdateRequest implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                "EmailRegUpdateRequest", "ns13");

        /**
         * field for TRANSACTION_ID
         */
        protected java.lang.String localTRANSACTION_ID;

        /**
         * field for MSISDN
         */
        protected java.lang.String localMSISDN;

        /**
         * field for REQUESTTYPE
         */
        protected java.lang.String localREQUESTTYPE;

        /**
         * field for EMAILID
         */
        protected java.lang.String localEMAILID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEMAILIDTracker = false;

        /**
         * field for SOURCE
         */
        protected java.lang.String localSOURCE;

        /**
         * field for SUB_TYPE
         */
        protected java.lang.String localSUB_TYPE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSUB_TYPETracker = false;

        /**
         * field for INVOICE_ID
         */
        protected java.lang.String localINVOICE_ID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localINVOICE_IDTracker = false;

        /**
         * field for BILL_TYPE
         */
        protected java.lang.String localBILL_TYPE;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBILL_TYPETracker = false;

        /**
         * field for MONTH
         */
        protected java.lang.String localMONTH;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMONTHTracker = false;

        /**
         * field for YEAR
         */
        protected java.lang.String localYEAR;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localYEARTracker = false;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTRANSACTION_ID() {
            return localTRANSACTION_ID;
        }

        /**
         * Auto generated setter method
         * @param param TRANSACTION_ID
         */
        public void setTRANSACTION_ID(java.lang.String param) {
            this.localTRANSACTION_ID = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMSISDN() {
            return localMSISDN;
        }

        /**
         * Auto generated setter method
         * @param param MSISDN
         */
        public void setMSISDN(java.lang.String param) {
            this.localMSISDN = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getREQUESTTYPE() {
            return localREQUESTTYPE;
        }

        /**
         * Auto generated setter method
         * @param param REQUESTTYPE
         */
        public void setREQUESTTYPE(java.lang.String param) {
            this.localREQUESTTYPE = param;
        }

        public boolean isEMAILIDSpecified() {
            return localEMAILIDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEMAILID() {
            return localEMAILID;
        }

        /**
         * Auto generated setter method
         * @param param EMAILID
         */
        public void setEMAILID(java.lang.String param) {
            localEMAILIDTracker = param != null;

            this.localEMAILID = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSOURCE() {
            return localSOURCE;
        }

        /**
         * Auto generated setter method
         * @param param SOURCE
         */
        public void setSOURCE(java.lang.String param) {
            this.localSOURCE = param;
        }

        public boolean isSUB_TYPESpecified() {
            return localSUB_TYPETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSUB_TYPE() {
            return localSUB_TYPE;
        }

        /**
         * Auto generated setter method
         * @param param SUB_TYPE
         */
        public void setSUB_TYPE(java.lang.String param) {
            localSUB_TYPETracker = param != null;

            this.localSUB_TYPE = param;
        }

        public boolean isINVOICE_IDSpecified() {
            return localINVOICE_IDTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getINVOICE_ID() {
            return localINVOICE_ID;
        }

        /**
         * Auto generated setter method
         * @param param INVOICE_ID
         */
        public void setINVOICE_ID(java.lang.String param) {
            localINVOICE_IDTracker = param != null;

            this.localINVOICE_ID = param;
        }

        public boolean isBILL_TYPESpecified() {
            return localBILL_TYPETracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBILL_TYPE() {
            return localBILL_TYPE;
        }

        /**
         * Auto generated setter method
         * @param param BILL_TYPE
         */
        public void setBILL_TYPE(java.lang.String param) {
            localBILL_TYPETracker = param != null;

            this.localBILL_TYPE = param;
        }

        public boolean isMONTHSpecified() {
            return localMONTHTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMONTH() {
            return localMONTH;
        }

        /**
         * Auto generated setter method
         * @param param MONTH
         */
        public void setMONTH(java.lang.String param) {
            localMONTHTracker = param != null;

            this.localMONTH = param;
        }

        public boolean isYEARSpecified() {
            return localYEARTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getYEAR() {
            return localYEAR;
        }

        /**
         * Auto generated setter method
         * @param param YEAR
         */
        public void setYEAR(java.lang.String param) {
            localYEARTracker = param != null;

            this.localYEAR = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":EmailRegUpdateRequest", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "EmailRegUpdateRequest", xmlWriter);
                }
            }

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
            writeStartElement(null, namespace, "TRANSACTION_ID", xmlWriter);

            if (localTRANSACTION_ID == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "TRANSACTION_ID cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localTRANSACTION_ID);
            }

            xmlWriter.writeEndElement();

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
            writeStartElement(null, namespace, "MSISDN", xmlWriter);

            if (localMSISDN == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "MSISDN cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localMSISDN);
            }

            xmlWriter.writeEndElement();

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
            writeStartElement(null, namespace, "REQUESTTYPE", xmlWriter);

            if (localREQUESTTYPE == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "REQUESTTYPE cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localREQUESTTYPE);
            }

            xmlWriter.writeEndElement();

            if (localEMAILIDTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
                writeStartElement(null, namespace, "EMAILID", xmlWriter);

                if (localEMAILID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "EMAILID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEMAILID);
                }

                xmlWriter.writeEndElement();
            }

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
            writeStartElement(null, namespace, "SOURCE", xmlWriter);

            if (localSOURCE == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "SOURCE cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localSOURCE);
            }

            xmlWriter.writeEndElement();

            if (localSUB_TYPETracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
                writeStartElement(null, namespace, "SUB_TYPE", xmlWriter);

                if (localSUB_TYPE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "SUB_TYPE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSUB_TYPE);
                }

                xmlWriter.writeEndElement();
            }

            if (localINVOICE_IDTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
                writeStartElement(null, namespace, "INVOICE_ID", xmlWriter);

                if (localINVOICE_ID == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "INVOICE_ID cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localINVOICE_ID);
                }

                xmlWriter.writeEndElement();
            }

            if (localBILL_TYPETracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
                writeStartElement(null, namespace, "BILL_TYPE", xmlWriter);

                if (localBILL_TYPE == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "BILL_TYPE cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBILL_TYPE);
                }

                xmlWriter.writeEndElement();
            }

            if (localMONTHTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
                writeStartElement(null, namespace, "MONTH", xmlWriter);

                if (localMONTH == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "MONTH cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMONTH);
                }

                xmlWriter.writeEndElement();
            }

            if (localYEARTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
                writeStartElement(null, namespace, "YEAR", xmlWriter);

                if (localYEAR == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "YEAR cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localYEAR);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd")) {
                return "ns13";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static EmailRegUpdateRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                EmailRegUpdateRequest object = new EmailRegUpdateRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"EmailRegUpdateRequest".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (EmailRegUpdateRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "TRANSACTION_ID").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "TRANSACTION_ID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "TRANSACTION_ID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTRANSACTION_ID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "MSISDN").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "MSISDN").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MSISDN" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMSISDN(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "REQUESTTYPE").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "REQUESTTYPE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "REQUESTTYPE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setREQUESTTYPE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "EMAILID").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "EMAILID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "EMAILID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEMAILID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "SOURCE").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "SOURCE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SOURCE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSOURCE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "SUB_TYPE").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "SUB_TYPE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "SUB_TYPE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSUB_TYPE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "INVOICE_ID").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "INVOICE_ID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "INVOICE_ID" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setINVOICE_ID(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "BILL_TYPE").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "BILL_TYPE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "BILL_TYPE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBILL_TYPE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "MONTH").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "MONTH").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "MONTH" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMONTH(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "YEAR").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "YEAR").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "YEAR" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setYEAR(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class InvoiceUsageDetails_type0 implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = InvoiceUsageDetails_type0
           Namespace URI = http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5
           Namespace Prefix = ns16
         */

        /**
         * field for UsageDTM
         */
        protected java.lang.String localUsageDTM;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUsageDTMTracker = false;

        /**
         * field for UsageAmount
         */
        protected java.lang.String localUsageAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUsageAmountTracker = false;

        /**
         * field for UsageTtype
         */
        protected java.lang.String localUsageTtype;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUsageTtypeTracker = false;

        /**
         * field for Source
         */
        protected java.lang.String localSource;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSourceTracker = false;

        public boolean isUsageDTMSpecified() {
            return localUsageDTMTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUsageDTM() {
            return localUsageDTM;
        }

        /**
         * Auto generated setter method
         * @param param UsageDTM
         */
        public void setUsageDTM(java.lang.String param) {
            localUsageDTMTracker = param != null;

            this.localUsageDTM = param;
        }

        public boolean isUsageAmountSpecified() {
            return localUsageAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUsageAmount() {
            return localUsageAmount;
        }

        /**
         * Auto generated setter method
         * @param param UsageAmount
         */
        public void setUsageAmount(java.lang.String param) {
            localUsageAmountTracker = param != null;

            this.localUsageAmount = param;
        }

        public boolean isUsageTtypeSpecified() {
            return localUsageTtypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUsageTtype() {
            return localUsageTtype;
        }

        /**
         * Auto generated setter method
         * @param param UsageTtype
         */
        public void setUsageTtype(java.lang.String param) {
            localUsageTtypeTracker = param != null;

            this.localUsageTtype = param;
        }

        public boolean isSourceSpecified() {
            return localSourceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSource() {
            return localSource;
        }

        /**
         * Auto generated setter method
         * @param param Source
         */
        public void setSource(java.lang.String param) {
            localSourceTracker = param != null;

            this.localSource = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":InvoiceUsageDetails_type0",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "InvoiceUsageDetails_type0", xmlWriter);
                }
            }

            if (localUsageDTMTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "UsageDTM", xmlWriter);

                if (localUsageDTM == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UsageDTM cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localUsageDTM);
                }

                xmlWriter.writeEndElement();
            }

            if (localUsageAmountTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "UsageAmount", xmlWriter);

                if (localUsageAmount == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UsageAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localUsageAmount);
                }

                xmlWriter.writeEndElement();
            }

            if (localUsageTtypeTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "UsageTtype", xmlWriter);

                if (localUsageTtype == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "UsageTtype cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localUsageTtype);
                }

                xmlWriter.writeEndElement();
            }

            if (localSourceTracker) {
                namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5";
                writeStartElement(null, namespace, "Source", xmlWriter);

                if (localSource == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "Source cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localSource);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5")) {
                return "ns16";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static InvoiceUsageDetails_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                InvoiceUsageDetails_type0 object = new InvoiceUsageDetails_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"InvoiceUsageDetails_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (InvoiceUsageDetails_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "UsageDTM").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "UsageDTM").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UsageDTM" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUsageDTM(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "UsageAmount").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "UsageAmount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UsageAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUsageAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "UsageTtype").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "UsageTtype").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "UsageTtype" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUsageTtype(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/Hybrid/InvoiceUsageDetails.xsd5",
                                "Source").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "Source").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "Source" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSource(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class EmailRegUpdateResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                "EmailRegUpdateResponse", "ns13");

        /**
         * field for STATUSCODE
         */
        protected java.lang.String localSTATUSCODE;

        /**
         * field for STATUSTEXT
         */
        protected java.lang.String localSTATUSTEXT;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSTATUSCODE() {
            return localSTATUSCODE;
        }

        /**
         * Auto generated setter method
         * @param param STATUSCODE
         */
        public void setSTATUSCODE(java.lang.String param) {
            this.localSTATUSCODE = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSTATUSTEXT() {
            return localSTATUSTEXT;
        }

        /**
         * Auto generated setter method
         * @param param STATUSTEXT
         */
        public void setSTATUSTEXT(java.lang.String param) {
            this.localSTATUSTEXT = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":EmailRegUpdateResponse", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "EmailRegUpdateResponse", xmlWriter);
                }
            }

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
            writeStartElement(null, namespace, "STATUSCODE", xmlWriter);

            if (localSTATUSCODE == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "STATUSCODE cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localSTATUSCODE);
            }

            xmlWriter.writeEndElement();

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd";
            writeStartElement(null, namespace, "STATUSTEXT", xmlWriter);

            if (localSTATUSTEXT == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "STATUSTEXT cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localSTATUSTEXT);
            }

            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd")) {
                return "ns13";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static EmailRegUpdateResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                EmailRegUpdateResponse object = new EmailRegUpdateResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"EmailRegUpdateResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (EmailRegUpdateResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "STATUSCODE").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "STATUSCODE").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "STATUSCODE" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSTATUSCODE(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/EmailRegisterUpdate.xsd",
                                "STATUSTEXT").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "STATUSTEXT").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "STATUSTEXT" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSTATUSTEXT(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DisplayInvoiceResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                "DisplayInvoiceResponse", "ns15");

        /**
         * field for StatusCode
         */
        protected java.lang.String localStatusCode;

        /**
         * field for StatusText
         */
        protected java.lang.String localStatusText;

        /**
         * field for InvoiceDetails
         * This was an Array!
         */
        protected InvoiceDetails_type0[] localInvoiceDetails;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInvoiceDetailsTracker = false;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusCode() {
            return localStatusCode;
        }

        /**
         * Auto generated setter method
         * @param param StatusCode
         */
        public void setStatusCode(java.lang.String param) {
            this.localStatusCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStatusText() {
            return localStatusText;
        }

        /**
         * Auto generated setter method
         * @param param StatusText
         */
        public void setStatusText(java.lang.String param) {
            this.localStatusText = param;
        }

        public boolean isInvoiceDetailsSpecified() {
            return localInvoiceDetailsTracker;
        }

        /**
         * Auto generated getter method
         * @return InvoiceDetails_type0[]
         */
        public InvoiceDetails_type0[] getInvoiceDetails() {
            return localInvoiceDetails;
        }

        /**
         * validate the array for InvoiceDetails
         */
        protected void validateInvoiceDetails(InvoiceDetails_type0[] param) {
        }

        /**
         * Auto generated setter method
         * @param param InvoiceDetails
         */
        public void setInvoiceDetails(InvoiceDetails_type0[] param) {
            validateInvoiceDetails(param);

            localInvoiceDetailsTracker = param != null;

            this.localInvoiceDetails = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param InvoiceDetails_type0
         */
        public void addInvoiceDetails(InvoiceDetails_type0 param) {
            if (localInvoiceDetails == null) {
                localInvoiceDetails = new InvoiceDetails_type0[] {  };
            }

            //update the setting tracker
            localInvoiceDetailsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localInvoiceDetails);
            list.add(param);
            this.localInvoiceDetails = (InvoiceDetails_type0[]) list.toArray(new InvoiceDetails_type0[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DisplayInvoiceResponse", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DisplayInvoiceResponse", xmlWriter);
                }
            }

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
            writeStartElement(null, namespace, "StatusCode", xmlWriter);

            if (localStatusCode == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusCode cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatusCode);
            }

            xmlWriter.writeEndElement();

            namespace = "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd";
            writeStartElement(null, namespace, "StatusText", xmlWriter);

            if (localStatusText == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusText cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localStatusText);
            }

            xmlWriter.writeEndElement();

            if (localInvoiceDetailsTracker) {
                if (localInvoiceDetails != null) {
                    for (int i = 0; i < localInvoiceDetails.length; i++) {
                        if (localInvoiceDetails[i] != null) {
                            localInvoiceDetails[i].serialize(new javax.xml.namespace.QName(
                                    "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                    "InvoiceDetails"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "InvoiceDetails cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd")) {
                return "ns15";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DisplayInvoiceResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DisplayInvoiceResponse object = new DisplayInvoiceResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DisplayInvoiceResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DisplayInvoiceResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list3 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "StatusCode").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "StatusCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusCode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "StatusText").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "StatusText").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "StatusText" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatusText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if ((reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                "InvoiceDetails").equals(reader.getName())) ||
                            new javax.xml.namespace.QName("", "InvoiceDetails").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list3.add(InvoiceDetails_type0.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone3 = false;

                        while (!loopDone3) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone3 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://www.tibco.com/schemas/HCPT_ANGIE/Shared_Resources/XML/ODP/DisplayInvoiceDetails.xsd",
                                            "InvoiceDetails").equals(
                                            reader.getName())) {
                                    list3.add(InvoiceDetails_type0.Factory.parse(
                                            reader));
                                } else {
                                    loopDone3 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setInvoiceDetails((InvoiceDetails_type0[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                InvoiceDetails_type0.class, list3));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }
}
