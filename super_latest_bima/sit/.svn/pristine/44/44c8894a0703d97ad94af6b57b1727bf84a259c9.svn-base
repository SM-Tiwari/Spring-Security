package id.gnvsolution.d3.api.controller;

import id.gnvsolution.d3.api.dto.request.BaseRequestDto;
import id.gnvsolution.d3.api.dto.request.PaymentStatusDto;
import id.gnvsolution.d3.api.helper.enums.AppDefaultValues;
import id.gnvsolution.d3.api.helper.enums.AppUtils;
import id.gnvsolution.d3.api.security.securityutil.JWTConstant;
import id.gnvsolution.d3.api.security.securityutil.TokenDetails;
import id.gnvsolution.d3.api.security.securityutil.TokenExtractor;
import id.gnvsolution.d3.api.service.InvoiceService;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.gnv.vnm.selfcare.core.model.GetBillingSummaryResponse;
import com.gnv.vnm.selfcare.core.model.ServiceResult;
import com.gnv.vnm.selfcare.core.model.ServiceResult.StatusCode;

/**
 * <pre>
 *  id.gnvsolution.d3.api.controller.InvoiceController 
 * </pre>
 *
 * @author edwin < edwinkun at gmail dot com >
 * May 7, 2017 7:07:44 PM
 *
 */
@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
@RequestMapping("/api/v1/invoices")
public class InvoiceController extends BaseController {

	  @Autowired
	    private InvoiceService invoiceService;
	    
	    public static final Logger LOGGER = LoggerFactory.getLogger(InvoiceController.class);
		@Autowired
		private TokenExtractor tokenExtractor;

	    
	    @RequestMapping(value = "/last-3", method = RequestMethod.POST)
	    public Object getLast3Invoices(@RequestBody BaseRequestDto baseRequestDto,
	    		@RequestHeader(value=JWTConstant.JWT_HEADER_NAME, required = false) String authToken) {
	    	LOGGER.info("Inside InvoiceController in profile method::::::::::::");
			try {
				authToken = tokenExtractor.extract(authToken);
				System.out.println("authToken _____________" + authToken);
				TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
				String msisdn=AppUtils.removeCountryCode(baseRequestDto.getMsisdn(), AppDefaultValues.COUNTRY_CODE);
				baseRequestDto.setMsisdn(msisdn);
				if (tokenDetails != null && baseRequestDto.getMsisdn().trim().equalsIgnoreCase(tokenDetails.getMsisdn().trim())) {
					LOGGER.info("Inside  InvoiceController in profile method if condition ::::::::::::");
					return new ServiceResult(StatusCode.SUCCESS, invoiceService.viewLast3Invoices(baseRequestDto), "Success");
				} else {
					return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
				}
			} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
				LOGGER.error("Inside InvoiceController in getLast3Invoices method ::::::SignatureException " + ex.getMessage());
				return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

			} catch (ExpiredJwtException expiredEx) {
				System.out.println("----ExpiredJwtException-----------");
				LOGGER.error("Inside InvoiceController in getLast3Invoices method :::::: ExpiredJwtException" + expiredEx.getMessage());
				return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

			} catch (Exception expiredEx) {
				LOGGER.error("Inside InvoiceController in getLast3Invoices method ::::::Exception " + expiredEx.getMessage());
				return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
			}
			
	      //  return invoiceService.viewLast3Invoices(baseRequestDto);
	    }
	    
	    @RequestMapping(value = "/payment-status", method = RequestMethod.POST)
	    public Object getPaymentStatus(@RequestBody PaymentStatusDto paymentStatusDto,@RequestHeader(value=JWTConstant.JWT_HEADER_NAME, required = false) String authToken) {
	    	LOGGER.info("Inside InvoiceController in getPaymentStatus method::::::::::::");
			try {
				authToken = tokenExtractor.extract(authToken);
				System.out.println("authToken _____________" + authToken);
				TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
				String msisdn=AppUtils.removeCountryCode(paymentStatusDto.getMsisdn(), AppDefaultValues.COUNTRY_CODE);
				paymentStatusDto.setMsisdn(msisdn);
				if (tokenDetails != null && paymentStatusDto.getMsisdn().trim().equalsIgnoreCase(tokenDetails.getMsisdn().trim())) {
					
					return new ServiceResult(StatusCode.SUCCESS, invoiceService.getPaymentStatus(paymentStatusDto), "Success");
				} else {
					return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
				}
			} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
				LOGGER.error("Inside InvoiceController in getPaymentStatus method :::::: " + ex.getMessage());
				return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

			} catch (ExpiredJwtException expiredEx) {
				System.out.println("----ExpiredJwtException-----------");
				LOGGER.error("Inside InvoiceController in getPaymentStatus method :::::: " + expiredEx.getMessage());
				return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

			} catch (Exception expiredEx) {
				LOGGER.error("Inside InvoiceController in getPaymentStatus method :::::: " + expiredEx.getMessage());
				return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
			}
	       
	    }
}
