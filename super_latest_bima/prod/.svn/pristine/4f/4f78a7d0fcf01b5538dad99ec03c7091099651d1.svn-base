package id.gnvsolution.d3.api.controller;

import java.security.SignatureException;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.gnv.vnm.selfcare.core.model.Packege092Responce;
import com.gnv.vnm.selfcare.core.model.ServiceResult;
import com.gnv.vnm.selfcare.core.model.ServiceResult.StatusCode;
import id.gnvsolution.d3.api.dto.request.CmsOfferRequest;
import id.gnvsolution.d3.api.dto.response.ErrorMessageDto;
import id.gnvsolution.d3.api.security.securityutil.JWTConstant;
import id.gnvsolution.d3.api.security.securityutil.TokenDetails;
import id.gnvsolution.d3.api.security.securityutil.TokenExtractor;
import id.gnvsolution.d3.api.service.Packages092Service;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.UnsupportedJwtException;


@RestController
@RequestMapping("/api/v1/")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class Controller092Packages extends BaseController{

	@Autowired
	private TokenExtractor tokenExtractor;
	@Autowired
	Packages092Service packages092Service;
	public static final Logger LOGGER = LoggerFactory.getLogger(Controller092Packages.class);

	// private AuthanticateTocken authanticateTocken;

	@GetMapping(value = "/get092Packages")
	public Object get092Packages(@RequestParam("msisdn") String msisdn, @RequestParam("lang") String lang,
			@RequestParam("subscriberType") String subscriberType, @RequestParam("imei") String imei,
			@RequestHeader(JWTConstant.JWT_HEADER_NAME) String authToken) {

		LOGGER.info("Inside Controller092Packages in get092Packages method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			System.out.println("authToken _____________" + authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			if (tokenDetails != null) {
				Packege092Responce packege092Responce = packages092Service.getPackages(msisdn, lang, subscriberType,
						accessRight(imei));
				if (packege092Responce != null) {
					return new ServiceResult(StatusCode.SUCCESS, packege092Responce, "Success");
				} else {
					ErrorMessageDto err = new ErrorMessageDto(false, "No Data Available");
					return new ServiceResult(StatusCode.SUCCESS, err, "Success");
				}

			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside Controller092Packages in get092Packages method :::::: " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside Controller092Packages in get092Packages method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside Controller092Packages in get092Packages method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}
	}
	 
	@RequestMapping(value = "/get-cms-offerlist",method = RequestMethod.POST)
	public Object GetOfferList(@RequestBody CmsOfferRequest request,@RequestHeader(JWTConstant.JWT_HEADER_NAME) String authToken) {
		LOGGER.info("Inside Controller092Packages in GetOfferList method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			System.out.println("authToken _____________" + authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			if (tokenDetails != null) {
				
					return new ServiceResult(StatusCode.SUCCESS, packages092Service.getCmsOfferList(request), "Success");
				

			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside Controller092Packages in GetOfferList method :::::: " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside Controller092Packages in GetOfferList method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside Controller092Packages in GetOfferList method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}
		//return packages092Service.getCmsOfferList(request);

	}
	
	@RequestMapping(value = "/activate-cms-offer",method = RequestMethod.POST)
	public Object activateCmsOffer(@RequestBody CmsOfferRequest request,@RequestHeader(JWTConstant.JWT_HEADER_NAME) String authToken) {
		LOGGER.info("Inside Controller092Packages in activateCmsOffer method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			System.out.println("authToken _____________" + authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			if (tokenDetails != null) {
				
					return new ServiceResult(StatusCode.SUCCESS, packages092Service.activateCmsOffer(request), "Success");
				

			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside Controller092Packages in activateCmsOffer method :::::: " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside Controller092Packages in activateCmsOffer method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside Controller092Packages in activateCmsOffer method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}
		

	}

	 
}
