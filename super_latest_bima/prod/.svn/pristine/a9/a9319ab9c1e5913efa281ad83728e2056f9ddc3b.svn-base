package id.gnvsolution.d3.api.controller;

import id.gnvsolution.d3.api.dto.request.ProductPerformanceDto;
import id.gnvsolution.d3.api.helper.enums.AppDefaultValues;
import id.gnvsolution.d3.api.helper.enums.AppUtils;
import id.gnvsolution.d3.api.security.securityutil.JWTConstant;
import id.gnvsolution.d3.api.security.securityutil.TokenDetails;
import id.gnvsolution.d3.api.security.securityutil.TokenExtractor;
import id.gnvsolution.d3.api.service.ProductPerformanceService;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.gnv.vnm.selfcare.core.model.ServiceResult;
import com.gnv.vnm.selfcare.core.model.ServiceResult.StatusCode;

/**
 * <pre>
 * id.gnvsolution.d3.api.controller.ProductPerformanceController
 * </pre>
 *
 * @author edwin < edwinkun at gmail dot com > Dec 29, 2017 9:13:04 PM
 *
 */
@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
@RequestMapping("/api/v1/")
public class ProductPerformanceController extends BaseController {

	@Autowired
	private ProductPerformanceService productPerformanceService;
	@Autowired
	private TokenExtractor tokenExtractor;
	public static final Logger LOGGER = LoggerFactory.getLogger(ProductPerformanceController.class);

	@RequestMapping(value = "/product-performance/add", method = RequestMethod.POST)
	public Object addProductPerformance(@RequestBody ProductPerformanceDto productPerformanceDto,
			@RequestHeader(value = JWTConstant.JWT_HEADER_NAME, required = false) String authToken) {
		// return productPerformanceService.add(productPerformanceDto);

		LOGGER.info("Inside ProductPerformanceController in addProductPerformance method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			System.out.println("authToken _____________" + authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			String msisdn=AppUtils.removeCountryCode(productPerformanceDto.getMsisdn(), AppDefaultValues.COUNTRY_CODE);
			productPerformanceDto.setMsisdn(msisdn);
			if (tokenDetails != null
					&& productPerformanceDto.getMsisdn().trim().equalsIgnoreCase(tokenDetails.getMsisdn().trim())) {
				/* Map profiledata = profileService.getProfile(requestDto); */
				return new ServiceResult(StatusCode.SUCCESS, productPerformanceService.add(productPerformanceDto),
						"Success");
			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside ProductPerformanceController in addProductPerformance method:::::::::::: " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside ProductPerformanceController in addProductPerformance method::::::::::::" + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside ProductPerformanceController in addProductPerformance method::::::::::::" + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}

		// return new ServiceResult(StatusCode.SUCCESS,
		// productPerformanceService.add(productPerformanceDto), "Success");
	}

}