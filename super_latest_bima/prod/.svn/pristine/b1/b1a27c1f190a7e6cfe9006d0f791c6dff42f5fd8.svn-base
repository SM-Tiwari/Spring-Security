package id.gnvsolution.d3.api.utils;

import id.gnvsolution.d3.api.Constants;
import id.gnvsolution.d3.api.helper.enums.AppUtils;
import id.gnvsolution.d3.api.model.helper.GetProfileDetail;
import id.gnvsolution.d3.api.model.purchasing.ClmOfferResponse;
import id.gnvsolution.d3.api.model.purchasing.ClmProduct;
import id.gnvsolution.d3.api.model.purchasing.TibcoODPBonusRegRequest;
import id.gnvsolution.d3.api.service.AppConfigService;
import id.gnvsolution.d3.api.service.TibcoService;
import id.gnvsolution.d3.api.wsdl.GenricTIBODPservicesStub;
import id.gnvsolution.d3.api.wsdl.Service__Registration__APISecurityStub;
import org.apache.http.HttpResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StringUtils;

import com.gnv.vnm.selfcare.core.AppDefaultValues;
import com.tibco.www.schemas.vnm_project.shared_resources.abstract_wsdl.selfcare.schema_xsd.NonVasRegResponse;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;

public class ApiHelpers {

    public static final Logger LOGGER = LoggerFactory.getLogger(ApiHelpers.class);
    @Autowired
    private TibcoService tibcoService;
    
	@Autowired
	private AppConfigService applicationConfigurationService;
    
    public static boolean apiClm(String transactionId, String msisdn, String offerId) {
        try {
            GenricTIBODPservicesStub stub = new GenricTIBODPservicesStub(Constants.TIBCO_URL_GENERIC_TIBCO_ENDPOINT);
            GenricTIBODPservicesStub.SendOfferRequest sendOfferRequest = new GenricTIBODPservicesStub.SendOfferRequest();
            sendOfferRequest.setTRANSACTION_ID(transactionId);
            sendOfferRequest.setMSISDN(msisdn);
            sendOfferRequest.setOFFERID(offerId);
            LOGGER.info("ApiHelpers.apiClm.sendOfferRequest: " + sendOfferRequest.getTRANSACTION_ID() + "," + sendOfferRequest.getMSISDN() + "," + sendOfferRequest.getOFFERID());

            GenricTIBODPservicesStub.SendOfferResponse clmOfferResult = stub.cLMOffers(sendOfferRequest);
            LOGGER.info("ApiHelpers.apiClm.sendOfferRequest: " + StringUtils.arrayToCommaDelimitedString(new Object[]{clmOfferResult.getResponseCode(), clmOfferResult.getResponseDescription()}));

            if (clmOfferResult.getResponseCode().equals("00") || clmOfferResult.getResponseCode().equals("00000")) {
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return false;
        }
    }

    public static String apiNsnCms(String msisdn, String sourceId, String contentId) {
        try {
            GenricTIBODPservicesStub.PurchaseMusicNSNRequest purchaseNSN = new GenricTIBODPservicesStub.PurchaseMusicNSNRequest();
            purchaseNSN.setMSISDN(msisdn);
            purchaseNSN.setContentSourceID(sourceId);
            purchaseNSN.setContentItemID(contentId);
            LOGGER.info("ApiHelpers.apiNsnCms.purchaseNSN: " + StringUtils.arrayToCommaDelimitedString(new Object[]{purchaseNSN.getMSISDN(), purchaseNSN.getContentSourceID(), purchaseNSN.getContentItemID()}));

            GenricTIBODPservicesStub tibco = null;
            try {
                tibco = new GenricTIBODPservicesStub(Constants.TIBCO_URL_GENERIC_TIBCO_ENDPOINT);
                GenricTIBODPservicesStub.PurchaseMusicNSNResponse response = tibco.purchaseMusicNSN(purchaseNSN);
                if (response.getStatusCode().equals("00000")) {
                    LOGGER.info("ApiHelpers.apiNsnCms.response: " + response.getDownloadURL());
                    return response.getDownloadURL();
                } else {
                    LOGGER.info("ApiHelpers.apiNsnCms.response: " + response.getStatusCode() + "," + response.getStatusText());
                    return null;
                }
            } catch (RemoteException e) {
                e.printStackTrace();
            }
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public  boolean apiProductBilling(String msisdn, String registrationKey,String lang,String productid) {
        try {
        	LOGGER.info("#apiProductBilling----------msisdn=="+msisdn+"---------registrationKey=="+registrationKey+"-------language=="+lang+"--------product id=="+productid);
           /* TibcoODPBonusRegRequest odpBonusRegRequest = new TibcoODPBonusRegRequest();
            odpBonusRegRequest.getBonusRequest().setTransactionId(transactionId);
            odpBonusRegRequest.getBonusRequest().setMsisdn(msisdn);
            odpBonusRegRequest.getBonusRequest().setActionType("ADD");
            odpBonusRegRequest.getBonusRequest().setRegistrationKey(registrationKey);
            odpBonusRegRequest.getBonusRequest().setCharge(isCharge ? "Y" : "N");
            odpBonusRegRequest.getBonusRequest().setHibridFlag("N");
            odpBonusRegRequest.getBonusRequest().setSource("ODP_GNV");

            String xmlRequest = XmlHelper.marshal(odpBonusRegRequest);
            LOGGER.info("ApiHelpers.apiProductBilling.xmlRequest: " + xmlRequest);
            HttpResponse response = HttpClientHelper.postData(Constants.API_PURCHASE_BILLING_URL, xmlRequest, new HashMap() {{
                put("Content-Type", "text/xml; charset=utf-8");
            }});
            LOGGER.info("ApiHelpers.apiProductBilling.odpBonusRegRequest: " + odpBonusRegRequest);
            */
        	 NonVasRegResponse responce=null;
        	try {
				  responce=tibcoService.Subscribpackage(msisdn,lang,productid,productid,registrationKey);
				  LOGGER.info("#apiProductBilling--------response after calling tibco service subscribe package==", responce.getResponseCode());
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
            if (responce.getResponseCode().equalsIgnoreCase("1")) {
            	 return true;
                /*TibcoODPBonusRegRequest tibcoResult = (TibcoODPBonusRegRequest) XmlHelper.unMarshal(responce.getEntity().getContent(), TibcoODPBonusRegRequest.class);
                LOGGER.info("ApiHelpers.apiProductBilling.tibcoResult: " + tibcoResult);
                
                if (tibcoResult.getBonusRequest().getResponseCode().equals("00000")) {
                    return true;
                } else {
                    LOGGER.info("ApiHelpers.apiProductBilling.xmlResponse: " + tibcoResult.getBonusRequest().getResponseCode() + "," + tibcoResult.getBonusRequest().getResponseDescription());
                    return false;
                }*/
            } else {
                return false;
            }

        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return false;
        }
    }

    public static boolean apiProductData(String transactionId, String msisdn, boolean isCharge, String registrationKey) {
        Service__Registration__APISecurityStub.ServiceRegRequest regRequest = new Service__Registration__APISecurityStub.ServiceRegRequest();
        regRequest.setTransactionID(transactionId);
        regRequest.setCurrent_Date((new SimpleDateFormat("yyyyMMdd")).format(new Date()));
        regRequest.setSource("ODP_GNV");
        regRequest.setCharge(isCharge ? "Y" : "N");
        regRequest.setHYBRID_FLAG("N");
        regRequest.setMSISDN(msisdn);
        regRequest.setActionType("ACTIVATE");
        regRequest.setServiceType(registrationKey);
        regRequest.setCPName("NULL");
        regRequest.setSignature(Helpers.generateSignature(regRequest.getCurrent_Date(), regRequest.getServiceType(), regRequest.getTransactionID(), regRequest.getMSISDN()));

        try {
            LOGGER.info("ApiHelpers.apiProductData.regRequest: " + regRequest.getTransactionID() + "," + regRequest.getMSISDN() + "," + regRequest.getServiceType() + "," + regRequest.getCharge() + "," + regRequest.getSignature());
            Service__Registration__APISecurityStub apiSecurityStub = new Service__Registration__APISecurityStub(Constants.TIBCO_URL_DATA_PACKAGE_ENDPOINT);
            Service__Registration__APISecurityStub.ServiceRegResponse response = apiSecurityStub.service_Registration(regRequest);
            if (response.getResponseCode().equals("200")) {
                return true;
            } else {
                LOGGER.info("ApiHelpers.apiProductData.response: " + response.getResponseCode() + "," + response.getResponseDescription());
                return false;
            }
        } catch (RemoteException e) {
            LOGGER.error(e.getMessage(), e);
            return false;
        }
    }

    public static boolean isExistingProfilePackage(List<GetProfileDetail> getProfileDetailList, String packageName) {
        boolean isExist = false;
        for (GetProfileDetail profileDetail : getProfileDetailList) {
            if (profileDetail.getQTANAME() != null && profileDetail.getQTANAME().equals(packageName)) {
                isExist = true;
                break;
            }
        }
        return isExist;
    }

    public static String getApiClmOfferId(String transactionId, String msisdn, String campaignId) {
        try {
            HttpResponse httpResult = HttpClientHelper.getData(Constants.API_CLM_PERSONALIZED_OFFERS, new HashMap<String, String>() {{
                put("msisdn", msisdn);
                put("shortcode", "bimatri");
                put("tid", transactionId);
            }}, null);
            LOGGER.info("ApiHelpers.getApiClmOfferId.httpRequest: " + transactionId + "," + msisdn + "," + campaignId);

            if (httpResult.getStatusLine().getStatusCode() == 200) {
                ClmOfferResponse clmOfferResponse = (ClmOfferResponse) XmlHelper.unMarshal(httpResult.getEntity().getContent(), ClmOfferResponse.class);
                
                LOGGER.info("==================================================================");
                LOGGER.info("getApiClmOfferId [Request] >> "+transactionId + "," + msisdn + "," + campaignId);
                LOGGER.info("==================================================================");
                
                LOGGER.info("==================================================================");
                LOGGER.info("getApiClmOfferId [Response] >> "+clmOfferResponse);
                LOGGER.info("==================================================================");
                
                if(clmOfferResponse.getProducts() == null) {
                    return null;
                }
                for (ClmProduct product : clmOfferResponse.getProducts()) {
                    if (product.getOfferID().equals(campaignId)) {
                        return product.getOfferID();
                    }
                }

                return null;
            } else {

                LOGGER.info("==================================================================");
                LOGGER.info("getApiClmOfferIdList [StatusCode] >> " + httpResult.getStatusLine().getStatusCode());
                LOGGER.info("==================================================================");
                return null;
            }
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return null;
        }
    }

    public static List<String> getApiClmOfferIdList(String transactionId, String msisdn) {
        List<String> offerIdList = new ArrayList<>();

        try {
            HttpResponse httpResult = HttpClientHelper.getData(Constants.API_CLM_PERSONALIZED_OFFERS, new HashMap<String, String>() {{
                put("msisdn", msisdn);
                put("shortcode", "bimatri");
                put("tid", transactionId);
            }}, null);
            LOGGER.info("ApiHelpers.getApiClmOfferIdList.httpRequest: " + transactionId + "," + msisdn);

            LOGGER.info("==================================================================");
            LOGGER.info("getApiClmOfferIdList [Request] >> "+transactionId + "," + msisdn);
            LOGGER.info("==================================================================");

            if (httpResult.getStatusLine().getStatusCode() == 200) {
                ClmOfferResponse clmOfferResponse = (ClmOfferResponse) XmlHelper.unMarshal(httpResult.getEntity().getContent(), ClmOfferResponse.class);

                LOGGER.info("==================================================================");
                LOGGER.info("getApiClmOfferIdList [Response] >> "+clmOfferResponse);
                LOGGER.info("==================================================================");

                if(clmOfferResponse == null || clmOfferResponse.getProducts()== null)
                    return offerIdList;

                for (ClmProduct product : clmOfferResponse.getProducts()) {
                    offerIdList.add(product.getOfferID());
                }

                return offerIdList;
            } else {
                LOGGER.info("==================================================================");
                LOGGER.info("getApiClmOfferIdList [StatusCode] >> " + httpResult.getStatusLine().getStatusCode());
                LOGGER.info("==================================================================");
            }
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
        }

        return offerIdList;
    }

    //092Packages
    public  String get092Packages(String transactionId, String msisdn) {
        
    	StringBuilder result=null;
        try {
        	  result = new StringBuilder();
        	 String subscriberId = AppUtils.prependCountryCodeToMsisdn(msisdn, AppDefaultValues.COUNTRY_CODE);
        	// System.out.println(applicationConfigurationService.get("092PACKAGE.URL", "http://10.6.10.51:8009/offer092?msisdn=")+subscriberId);
    		 URL url = new URL("http://10.6.10.51:8009/offer092?msisdn="+subscriberId);
        	 // URL url = new URL(Constants.PACKAGES_URL);
    		 
    		System.out.println("URL>>>>> "+url);
    		
    		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    		conn.setRequestMethod("GET");
    		BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
    		String line;
    		while ((line = rd.readLine()) != null) {
    			result.append(line);
    		}
    		rd.close();
    		//return result.toString();

            /*HttpResponse httpResult = HttpClientHelper.getPackages(Constants.PACKAGES_URL, msisdn);
            LOGGER.info("ApiHelpers.getApiClmOfferIdList.httpRequest: " + transactionId + "," + msisdn);

            LOGGER.info("==================================================================");
            LOGGER.info("getPackages [Request] >> "+transactionId + "," + msisdn);
            LOGGER.info("==================================================================");

            if (httpResult.getStatusLine().getStatusCode() == 200) {
            	

                LOGGER.info("==================================================================");
                LOGGER.info("getPackages [Response] >> "+ httpResult);
                LOGGER.info("==================================================================");
                return httpResult;
                
            } else {
                LOGGER.info("==================================================================");
                LOGGER.info("getPackages [StatusCode] >> " + httpResult.getStatusLine().getStatusCode());
                LOGGER.info("==================================================================");
            }*/
        } catch (Exception e) {
            LOGGER.error("Exception to get package detail !!!!!!  "+e.getMessage(), e);
            
        }
        System.out.println( "HttpJson result ::: "+result.toString());
		return result.toString();

       
    }

    
}
