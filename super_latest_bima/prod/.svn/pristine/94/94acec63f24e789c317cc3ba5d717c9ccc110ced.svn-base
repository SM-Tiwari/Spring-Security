/**
 * Mar 12, 2018 8:55:06 PM
 */
package id.gnvsolution.d3.api.security.securityutil;

import java.io.Serializable;
import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import id.gnvsolution.d3.api.security.securityutil.JWTConstant;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

/**
 * @author nandipinto
 *
 */
@Component
public class JwtTokenUtil implements Serializable {
	
	/**
	 * Instance of Logger {@link Logger}
	 */
	private static final Logger logger = Logger.getLogger(JwtTokenUtil.class);

	private static final long serialVersionUID = -7813450481469408963L;
	
    private String issuer = JWTConstant.JWT_ISSUER;
	private String signature = JWTConstant.JWT_SIGNATURE;
	private long expiration = JWTConstant.TOKEN_VALIDITY_IN_MINUTES;
	
	public JwtTokenUtil() {}

/*public static void main(String[] args) {
    	
		JwtTokenUtil authanticateTocken= new JwtTokenUtil(); 
	    	
	    	String msisdn = "9996470284";
	    	String msisdn2 = "9996470284";
	    	
	    	String authToken =authanticateTocken.generateToken(msisdn,null);
	    	System.out.println(authToken);
	    	
	    	Boolean b =authanticateTocken.validateToken(authToken, msisdn2);
	    	System.out.println(b);
			
		}*/
	
	
	public JwtTokenUtil(String issuer, String signature, long expiration) {
		this.issuer = issuer;
		this.signature = signature;
		this.expiration = expiration;
	}

    /**
	 * @return the issuer
	 */
	public String getIssuer() {
		return issuer;
	}

	/**
	 * @param issuer the issuer to set
	 */
	public void setIssuer(String issuer) {
		this.issuer = issuer;
	}

	/**
	 * @return the signature
	 */
	public String getSignature() {
		return signature;
	}

	/**
	 * @param signature the signature to set
	 */
	public void setSignature(String signature) {
		this.signature = signature;
	}

	/**
	 * @return the expiration
	 */
	public long getExpiration() {
		return expiration;
	}

	/**
	 * @param expiration the expiration to set
	 */
	public void setExpiration(long expiration) {
		this.expiration = expiration;
	}

	public String getUsernameFromToken(String token) {
        String username;
        try {
            final Claims claims = getClaimsFromToken(token);
            username = claims.getSubject();
        } catch (Exception e) {
            username = null;
        }
        return username;
    }
    
    public Date getCreatedDateFromToken(String token) {
        Date created;
        try {
            final Claims claims = getClaimsFromToken(token);
            created = new Date((Long) claims.get(JWTConstant.JWT_CLAIM_KEY_CREATED));
        } catch (Exception e) {
            created = null;
        }
        return created;
    }

    public Date getExpirationDateFromToken(String token) {
        Date expiration;
        try {
        	
            final Claims claims = getClaimsFromToken(token);
            expiration = claims.getExpiration();
        } catch (Exception e) {
            expiration = null;
        }
        return expiration;
    }

    private Claims getClaimsFromToken(String token) {
    	
        Claims claims;
        try {
            claims = Jwts.parser().setSigningKey(signature).parseClaimsJws(token).getBody();
        } catch (Exception e) {
            claims = null;
        }
        return claims;
    }

    
    private Date generateExpirationDate() {
        return new Date(System.currentTimeMillis() + expiration);
    }

    private Boolean isTokenExpired(String token) {
      //  final Date expiration = getExpirationDateFromToken(token);
      //  return expiration.before(new Date());
    	try {
    		Jwts.parser().setSigningKey(signature).parseClaimsJws(token);
		} catch (Exception e) {
			return true;
		}
    	return false;
    }

    private String generateToken(Map<String, Object> claims) {
    	
        return Jwts.builder()
                .setClaims(claims)
                .setExpiration(generateExpirationDate())
                .signWith(SignatureAlgorithm.HS512, signature)
                .compact();
    }
    
    public String createTokenForSignUpProcess(String userName, String fingerPrint) {
    	logger.debug("Inside JwtTokenUtil in createTokenForSignUpProcess method :::::: ");
    	try{
    		 Claims claims = Jwts.claims().setSubject(userName);
    		
    	        if (StringUtils.hasText(fingerPrint)) {
    	        	claims.put(JWTConstant.JWT_CLAIM_FGP, fingerPrint);
    	        }
    	        
    	        return Jwts.builder()
    	                .setClaims(claims)
    	                .setIssuer(issuer)
    	                .setIssuedAt(new Date(System.currentTimeMillis()))
    	                .setExpiration(new Date(System.currentTimeMillis() + expiration))
    	                .signWith(SignatureAlgorithm.HS512, signature)
    	                .compact();
    	}
    	catch (Exception e) {
    		logger.error(
					"Exception Inside JwtTokenUtil in createTokenForSignUpProcess method :::::: " + e.getMessage());
			return null;
		}
       
    }
    
    public Boolean canTokenBeRefreshed(String token) {
        return  !isTokenExpired(token);
    }

    public String refreshToken(String token) {
        String refreshedToken;
        try {
            final Claims claims = getClaimsFromToken(token);
            claims.put(JWTConstant.JWT_CLAIM_KEY_CREATED, new Date());
            refreshedToken = generateToken(claims);
        } catch (Exception e) {
            refreshedToken = null;
        }
        return refreshedToken;
    }

    public Boolean validateToken(String token, UserDetails userDetails) {
    	if(!isTokenExpired(token)) {
        final String username = getUsernameFromToken(token);
        return (username.equals(userDetails.getUsername()));
    	}
    	return false;
    }
    
    public Boolean validateToken(String token, String theUserName) {
    	if(!isTokenExpired(token)) {
        final String username = getUsernameFromToken(token);
        return (username.equals(theUserName) );
    	}
    	return false;
    }
    public Boolean validateToken(String token) {
      //  final String username = getUsernameFromToken(token);
        return (isTokenExpired(token));
    }
	public Boolean validateTokenWithOutExpireds(String token, String theUserName) {
        final String username = getUsernameFromToken(token);
        return (username.equals(theUserName));
    }
	
	/**
	 * Parses and validates JWT Token signature.
	 * 
	 * @param token
	 *            {@link String}
	 * @param signingKey
	 *            {@link String}
	 * @throws BadCredentialsException
	 * @throws JwtExpiredTokenException
	 * 
	 */
	private Jws<Claims> parseClaims(String token, String signingKey) throws Exception {
		/*try {
			return Jwts.parser().setSigningKey(signingKey).parseClaimsJws(token);
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			logger.error("Inside JwtAuthenticationProvider, Invalid JWT Token " + ex.getMessage());
			throw new BadCredentialsException("Bad Request");
		} catch (ExpiredJwtException expiredEx) {
			logger.error("Inside JwtAuthenticationProvider, JWT Token is expired " + expiredEx.getMessage());
			throw new ExpiredJwtException(null, null, null, null);
		}*/
		
		return Jwts.parser().setSigningKey(signingKey).parseClaimsJws(token);
		
	}
	
	/**
	 * This method is used for extracting the firm id from token.
	 * 
	 * @param token
	 *            {@link String}
	 * @return firmId {@link Long}
	 */
	public TokenDetails getUserDetailsFromToken(String token) throws Exception{
		logger.debug("Inside JwtAuthenticationProvider in getFirmId method :::::::");
		TokenDetails tokenDetails = new TokenDetails();
		Jws<Claims> jwsClaims = parseClaims(token, signature);
		Claims claims = jwsClaims.getBody();
		tokenDetails.setMsisdn(claims.getSubject());
	System.out.println("___________"+claims.getSubject());
		/**
		 * extract firm id from token.
		 *//*
		Integer partner_firm_Id = (Integer) claims.get(CSHConstants.PARTNER_FIRM_ID);

		if (partner_firm_Id != null) {
			tokenDetails.setPartnerFirmId(Long.valueOf(partner_firm_Id));
		}
		*//**
		 * extract role id from token.
		 *//*
		Integer role_Id = (Integer) claims.get(CSHConstants.ROLE_ID);
		if (role_Id != null) {
			tokenDetails.setRoleId(Long.valueOf(role_Id));
		}
		*//**
		 * extract own firm id from token.
		 *//*
		Integer self_firm_Id = (Integer) claims.get(CSHConstants.FIRM_ID);

		if (self_firm_Id != null) {
			tokenDetails.setFirmId(Long.valueOf(self_firm_Id));
		}
		String id = jwsClaims.getBody().getId();
		if (id != null) {
			tokenDetails.setUserId(Long.valueOf(id));
		}*/
		return tokenDetails;
	}
	
}
