package id.gnvsolution.d3.api.controller;

import id.gnvsolution.d3.api.dto.response.ErrorMessageDto;
import id.gnvsolution.d3.api.model.Parameter;
import id.gnvsolution.d3.api.service.StaticService;
import id.gnvsolution.d3.api.utils.JSONResultFilter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.gnv.vnm.selfcare.core.model.ServiceResult;
import com.gnv.vnm.selfcare.core.model.ServiceResult.StatusCode;

import java.util.HashMap;
import java.util.Map;
import org.springframework.web.bind.annotation.RequestMethod;

/**
 * Created by Arie
 * on 07/04/2017.
 */
@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
@RequestMapping("/api/v1/static")
public class StaticController {

    private final StaticService staticService;
    private final Map<String, String> staticValue = new HashMap<String, String>() {{
        put("SHARE_QUOTA_PRODUCT", "allowed");
    }};

    @Autowired
    public StaticController(StaticService staticService) {
        this.staticService = staticService;
    }

//    @RequestMapping("/faq")
//    public Map faq(@RequestBody BaseRequestDto request) {
//        return staticService.getFaq(request);
//    }

    @RequestMapping(value = "/value", method = RequestMethod.POST)
    public Object getValue(@RequestParam String key) {
        if (staticValue.containsKey(key)) {
            Parameter parameter = staticService.getParameter(key);
            if (parameter != null) {
                return new HashMap<String, Object>() {{
                    put("status", true);
                    put("static", parameter.getValue());
                }};
            } else {
            	return new ServiceResult(StatusCode.SUCCESS,new ErrorMessageDto(true, "Invalid Request"), "Success");
               // return JSONResultFilter.filter(new ErrorMessageDto(false, "Invalid Request")).all().build();
            }
        } else {
            //return JSONResultFilter.filter(new ErrorMessageDto(false, "Invalid Request")).all().build();
        	return new ServiceResult(StatusCode.SUCCESS,new ErrorMessageDto(false, "Invalid Request"), "Success");
        }
    }

}
