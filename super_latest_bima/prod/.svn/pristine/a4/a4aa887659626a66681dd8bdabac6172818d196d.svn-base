package id.gnvsolution.d3.api.controller;

import id.gnvsolution.d3.api.dto.request.BaseRequestDto;
import id.gnvsolution.d3.api.dto.request.PurchaseRequestDto;
import id.gnvsolution.d3.api.helper.enums.AppDefaultValues;
import id.gnvsolution.d3.api.helper.enums.AppUtils;
import id.gnvsolution.d3.api.security.securityutil.JWTConstant;
import id.gnvsolution.d3.api.security.securityutil.TokenDetails;
import id.gnvsolution.d3.api.security.securityutil.TokenExtractor;
import id.gnvsolution.d3.api.service.CustomerUiTypeService;
import id.gnvsolution.d3.api.service.PromoService;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.gnv.vnm.selfcare.core.model.ServiceResult;
import com.gnv.vnm.selfcare.core.model.ServiceResult.StatusCode;

/**
 * <pre>
 * id.gnvsolution.d3.api.controller.PhoneShakeController
 * </pre>
 *
 * @author edwin < edwinkun at gmail dot com > Apr 24, 2017 12:02:50 PM
 */
@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
@RequestMapping("/api/v1/shake")
public class PhoneShakeController extends BaseController {

	@Autowired
	private PromoService promoService;

	public static final Logger LOGGER = LoggerFactory.getLogger(PhoneShakeController.class);
	@Autowired
	private TokenExtractor tokenExtractor;

	@Autowired
	private CustomerUiTypeService customerUiTypeService;

	@RequestMapping(value = "/get-promo", method = RequestMethod.POST)
	public Object getPromo(@RequestBody BaseRequestDto baseRequestDto,
			@RequestHeader(value = JWTConstant.JWT_HEADER_NAME, required = false) String authToken) {
		LOGGER.info("Inside PhoneShakeController in getPromo method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			System.out.println("authToken _____________" + authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			String msisdn=AppUtils.removeCountryCode(baseRequestDto.getMsisdn(), AppDefaultValues.COUNTRY_CODE);
			baseRequestDto.setMsisdn(msisdn);
			if (tokenDetails != null
					&& baseRequestDto.getMsisdn().trim().equalsIgnoreCase(tokenDetails.getMsisdn().trim())) {

				return new ServiceResult(StatusCode.SUCCESS, promoService.getShakePromo(baseRequestDto,
						customerUiTypeService.isFull(baseRequestDto.getMsisdn())), "Success");
			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside PhoneShakeController in getPromo method :::::: " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside PhoneShakeController in getPromo method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside PhoneShakeController in getPromo method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}

	}

	@RequestMapping(value = "/redeem-promo", method = RequestMethod.POST)
	public Object redeemPromo(@RequestBody PurchaseRequestDto redeemRequestDto,
			@RequestHeader(value = JWTConstant.JWT_HEADER_NAME, required = false) String authToken) {

		LOGGER.info("Inside PhoneShakeController in redeemPromo method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			String msisdn=AppUtils.removeCountryCode(redeemRequestDto.getMsisdn(), AppDefaultValues.COUNTRY_CODE);
			redeemRequestDto.setMsisdn(msisdn);
			if (tokenDetails != null
					&& redeemRequestDto.getMsisdn().trim().equalsIgnoreCase(tokenDetails.getMsisdn().trim())) {

				return new ServiceResult(StatusCode.SUCCESS, promoService.redeemPromo(redeemRequestDto), "Success");
			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside PhoneShakeController in redeemPromo method :::::: " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside PhoneShakeController in redeemPromo method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside PhoneShakeController in redeemPromo method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}
	}

	@RequestMapping(value = "/cancel-promo", method = RequestMethod.POST)
	public Object cancelPromo(@RequestBody PurchaseRequestDto redeemRequestDto,
			@RequestHeader(value = JWTConstant.JWT_HEADER_NAME, required = false) String authToken) {
		LOGGER.info("Inside PhoneShakeController in cancelPromo method::::::::::::");
		try {
			authToken = tokenExtractor.extract(authToken);
			System.out.println("authToken _____________" + authToken);
			TokenDetails tokenDetails = getJwtTokenUtil().getUserDetailsFromToken(authToken);
			String msisdn=AppUtils.removeCountryCode(redeemRequestDto.getMsisdn(), AppDefaultValues.COUNTRY_CODE);
			redeemRequestDto.setMsisdn(msisdn);
			if (tokenDetails != null
					&& redeemRequestDto.getMsisdn().trim().equalsIgnoreCase(tokenDetails.getMsisdn().trim())) {

				return new ServiceResult(StatusCode.SUCCESS, promoService.cancelShakePromo(redeemRequestDto),
						"Success");
			} else {
				return new ServiceResult(StatusCode.UNAUTHORIZED, "", "UNAUTHORIZED User ");
			}
		} catch (UnsupportedJwtException | MalformedJwtException | IllegalArgumentException | SignatureException ex) {
			LOGGER.error("Inside PhoneShakeController in cancelPromo method :::::: " + ex.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");

		} catch (ExpiredJwtException expiredEx) {
			System.out.println("----ExpiredJwtException-----------");
			LOGGER.error("Inside PhoneShakeController in cancelPromo method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.JWT_TOKEN_EXPIRE, "", "Jwt token expire ");

		} catch (Exception expiredEx) {
			LOGGER.error("Inside PhoneShakeController in cancelPromo method :::::: " + expiredEx.getMessage());
			return new ServiceResult(StatusCode.BAD_REQUEST, "", "Bad Request");
		}
		// return promoService.cancelShakePromo(redeemRequestDto);
	}

}
